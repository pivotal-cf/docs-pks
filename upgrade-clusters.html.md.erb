---
title: Upgrading Clusters
owner: TKGI
---

This topic describes how to upgrade Kubernetes clusters
provisioned by <%= vars.product_full %> (<%= vars.product_short %>)
through the <%= vars.product_short %> Command Line Interface (<%= vars.k8s_runtime_abbr %> CLI).

For information about how to upgrade <%= vars.k8s_runtime_abbr %>-provisioned clusters
through the <%= vars.product_tile %> tile, 
see _Verify Errand Configuration_ in one of the following topics:

* [Upgrading <%= vars.product_short %> (Antrea and Flannel Networking)](upgrade.html)
* [Upgrading <%= vars.product_short %> (NSX-T Networking)](upgrade-nsxt.html)

For conceptual information about <%= vars.product_short %> upgrades,
see [About <%= vars.product_short %> Upgrades](understanding-upgrades.html).

## <a id="overview"></a>Overview

Upgrading a <%= vars.k8s_runtime_abbr %>-provisioned Kubernetes cluster updates
the <%= vars.product_short %> version and the Kubernetes version
of the cluster.  


<p class="note"><strong>Note</strong>: When upgrading <%= vars.k8s_runtime_abbr %> to mitigate the Apache Log4j vulnerability
you must also upgrade all <%= vars.k8s_runtime_abbr %> clusters.
</p>  

<%= vars.k8s_runtime_abbr %>-provisioned Kubernetes clusters upgrade when:

* You upgrade <%= vars.product_short %>
with the **Upgrade all clusters errand** enabled in the **<%= vars.product_tile %>** tile > **Errands**.
* You run `tkgi upgrade-cluster` or `tkgi upgrade-clusters`
as described in [Upgrade Clusters](#upgrade-clusters) below.

For example, running `tkgi upgrade-cluster`
upgrades the cluster you specify to your current version of <%= vars.product_short %>
and to the version of Kubernetes
that is included with your current version of <%= vars.product_short %>.

<p class="note warning"><strong>WARNING</strong>: Do not change the number of control plane/etcd nodes 
for any plan that was used to create currently-running clusters. 
<%= vars.product_short %> does not support changing the number of control plane/etcd nodes for plans 
with existing clusters.
</p>

##<a id='prerequisites'></a>Prerequisites

Before upgrading <%= vars.k8s_runtime_abbr %>-provisioned Kubernetes clusters:  

1. If you have not already done so, install the <%= vars.k8s_runtime_abbr %> CLI for the 
current <%= vars.k8s_runtime_abbr %> version. For information, 
see [Installing the <%= vars.k8s_runtime_abbr %> CLI](installing-cli.html).  
1. Verify the cluster you are upgrading supports upgrading. 
For information, see [Verify Your Clusters Support Upgrading](checklist.html#resource-usage)
 in the _Upgrade Preparation Checklist for <%= vars.product_short %>_.
1. Verify that your Kubernetes environment is healthy. 
<<<<<<< HEAD
For information, see [Verifying Deployment Health](verify-health.html).
1. Install the <%= vars.k8s_runtime_abbr %> CLI.
For information, see [Installing the <%= vars.k8s_runtime_abbr %> CLI](installing-cli.html).
=======
For information, see [Verifying Deployment Health](verify-health.html).  
<% if vars.product_version == "v1.14" %>
1. [Switch to the Auto-Deployed vSphere CSI Driver Before Upgrading](#upgrade-csi-driver).  
<% end %>
1. If you are upgrading a cluster that uses a public cloud CSI driver, 
see [Limitations on Using a Public Cloud CSI Driver](release-notes.html#1-15-0-csi-driver-limits) 
in _Release Notes_ for additional requirements.  
>>>>>>> 9686d90a... [#183037278] PKS-5835: Nodes UPDATE simultaneously and UPGRADE serially
1. Log in to <%= vars.product_short %> using `tkgi login`.
For more information, see [Logging in to <%= vars.product_short %>](login.html).  



##<a id='upgrade-runtime'></a>(Optional) Customize Cluster Container Runtimes Before Upgrading

Containerd is the default container runtime for newly created clusters.  

<p class="note"><strong>Note:</strong> 
All Docker container runtime clusters must be switched to use the containerd-runtime prior to upgrading to <%= vars.k8s_runtime_abbr %> v1.15.
</p>

By default, the <%= vars.k8s_runtime_abbr %> v1.14 `upgrade-cluster` errand will switch a cluster's container runtime from Docker to containerd.  

<p class="note warning"><strong>Warning</strong>:  Cluster workloads will experience downtime while the cluster switches 
    from using the Docker runtime to containerd.
</p>

<%= vars.recommended_by %> recommends that before upgrading to <%= vars.k8s_runtime_abbr %> v1.14 
that you either switch your clusters to the containerd container runtime 
or "lock" your clusters to the Docker container runtime:  

* [Switch a Cluster to a Different Container Runtime](#migrate-runtime)  
* [Lock a Cluster to the Docker Container Runtime](#lock-runtime)  

   
For more information on the containerd-runtime, see [Containerd Container Runtime](containerd.html).  

###<a id='migrate-runtime'></a>Switch a Cluster to a Different Container Runtime

You can switch an existing cluster from using a Docker container runtime to a containerd container runtime.  

<p class="note warning"><strong>Warning</strong>:  Cluster workloads will experience downtime while the cluster switches 
    from using the Docker runtime to containerd.
</p>

<p class="note"><strong>Note</strong>: Switching a cluster to a different container runtime is available only in <%= vars.k8s_runtime_abbr %> v1.13.3 
  and later <%= vars.k8s_runtime_abbr %> v1.13 patches.
</p>  

To switch an existing cluster to a different container runtime:  

1. To identify which of your existing clusters use a Docker container runtime:  

    ```
    kubectl get nodes -o wide
    ```
1. Create either a JSON or YAML cluster configuration file containing the following content:  
    * JSON formatted configuration file:  
    
        ```
        {
            "runtime": "RUNTIME-NAME"
        }
        ```
    * YAML formatted configuration file:  

        ```
        ---
        runtime: RUNTIME-NAME
        ```

    Where `RUNTIME-NAME` specifies either `docker` or `containerd` as the container runtime to switch to.  

1. To update your cluster with your configuration settings, run the following command:

    ```
    tkgi update-cluster CLUSTER-NAME --config-file CONFIG-FILE-NAME
    ```
    
    Where:  
    * `CLUSTER-NAME` is the name of your cluster.  
    * `CONFIG-FILE-NAME` is the cluster configuration file you created above.  

1. Verify your cluster now uses the containerd container runtime.  

<p class="note"><strong>Note</strong>: You must manage and monitor Docker and containerd runtime clusters differently. 
For more information, see <a href="https://docs.pivotal.io/tkgi/1-12/release-notes.html#1-12-0-breaking-changes">Breaking Changes</a> 
in the <%= vars.k8s_runtime_abbr %> v1.12 Release Notes.
</p>

     
###<a id='lock-runtime'></a>Lock a Cluster to the Docker Container Runtime

If you want an existing cluster to continue using the Docker container runtime after it has been upgraded to <%= vars.k8s_runtime_abbr %> v1.14, 
you must lock the cluster's container runtime before upgrading.   

<p class="note warning"><strong>Warning</strong>: The default value for <code>lock_container_runtime</code> is <code>false</code>. 
A "locked" cluster will switch to using the containerd runtime during the next <%= vars.k8s_runtime_abbr %> upgrade 
if, between locking and upgrading, you run <code>tkgi update-cluster</code> without including the <code>lock_container_runtime: true</code> parameter in your configuration.
</p>   

To lock an existing cluster to its current container runtime:

1. To identify which of your existing clusters use a Docker container runtime:

    ```
    kubectl get nodes -o wide
    ```
1. Create either a JSON or YAML cluster configuration file containing the following content:  
    * JSON formatted configuration file:  
    
        ```
        {
            "lock_container_runtime": true
        }
        ```
    * YAML formatted configuration file:  

        ```
        ---
        lock_container_runtime: true
        ```  
1. To update your cluster with your configuration settings, run the following command:

    ```
    tkgi update-cluster CLUSTER-NAME --config-file CONFIG-FILE-NAME
    ```
    
    Where:  
    * `CLUSTER-NAME` is the name of your cluster.  
    * `CONFIG-FILE-NAME` is the configuration file to use to lock the container runtime.  
    
    
<p class="note"><strong>Note</strong>: Locking a cluster container runtime is available only in <%= vars.k8s_runtime_abbr %> v1.13.3 
  and later <%= vars.k8s_runtime_abbr %> v1.13 patches.
</p>  


##<a id='upgrade-clusters'></a>Upgrade Clusters

You can use the <%= vars.k8s_runtime_abbr %> CLI to upgrade an existing cluster to the current version of <%= vars.k8s_runtime_abbr %>.  

To upgrade the <%= vars.k8s_runtime_abbr %> version on individual or multiple clusters:

* [Upgrade a Single Kubernetes Cluster](#upgrade-cluster)  
* [Upgrade Multiple Kubernetes Clusters](#upgrade-clusters-multi)

To monitor or stop a cluster upgrade, follow the procedures in 
[Manage Your Kubernetes Cluster Upgrade Job](#manage-upgrade) below.

###<a id='upgrade-cluster'></a>Upgrade a Single Cluster

The <%= vars.product_short %> CLI provides `upgrade-cluster` for upgrading an individual <%= vars.product_tile %>-provisioned 
Kubernetes cluster. 

To upgrade an individual Kubernetes cluster:  

1. Run the following command:

    ```
    tkgi upgrade-cluster CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the Kubernetes cluster you want to upgrade.  

For more information about the `tkgi upgrade-cluster` command, 
see [tkgi upgrade-cluster](cli/index.html#upgrade-cluster) in the _<%= vars.k8s_runtime_abbr %> CLI_ documentation.  

<p class="note"><strong>Note:</strong>
The nodes in an upgraded cluster are processed serially.  
</p>

To upgrade multiple clusters, see [Upgrade Multiple Kubernetes Clusters](#upgrade-clusters-multi) below.  

###<a id='upgrade-clusters-multi'></a>Upgrade Multiple Clusters

The <%= vars.product_short %> CLI provides `upgrade-clusters` for upgrading multiple <%= vars.product_tile %>-provisioned 
Kubernetes clusters. 
You can upgrade clusters serially, serially with some clusters designated as canary clusters, or entirely in parallel.  

<<<<<<< HEAD
To upgrade a single cluster, see [Upgrade a Single Kubernetes Cluster](#upgrade-cluster) above.
=======
To upgrade multiple Kubernetes clusters:  

1. Run the following command:  

    ```
    tkgi upgrade-clusters CLUSTER-NAMES
    ```
    Where `CLUSTER-NAMES` is a list of names of the Kubernetes clusters that you want to upgrade.

For more information about the `tkgi upgrade-clusters` command, 
see [tkgi upgrade-clusters](cli/index.html#upgrade-clusters) in the _<%= vars.k8s_runtime_abbr %> CLI_ documentation.  

<p class="note"><strong>Note:</strong>
The nodes in each upgraded cluster are always processed serially.  
</p>

To upgrade a single cluster, see [Upgrade a Single Kubernetes Cluster](#upgrade-cluster) above.  
>>>>>>> 9686d90a... [#183037278] PKS-5835: Nodes UPDATE simultaneously and UPGRADE serially

For more information about the `tkgi upgrade-clusters` command, see [tkgi upgrade-clusters](cli/index.html#upgrade-clusters) in the _<%= vars.k8s_runtime_abbr %> CLI_ documentation.    


####<a id='upgrade-clusters-parallel'></a> Upgrade Clusters in Parallel

<<<<<<< HEAD
To upgrade multiple Kubernetes clusters, run the following command:

```
tkgi upgrade-clusters --clusters CLUSTER-NAMES --max-in-flight CLUSTER-COUNT --wait
```
Where:
=======
To upgrade multiple Kubernetes clusters:  

1. Run the following command:  

    ```
    tkgi upgrade-clusters --clusters CLUSTER-NAMES --max-in-flight CLUSTER-COUNT --wait
    ```
    Where:
>>>>>>> 9686d90a... [#183037278] PKS-5835: Nodes UPDATE simultaneously and UPGRADE serially

* `CLUSTER-NAMES` is a comma-delimited list of the names of the Kubernetes clusters you want to upgrade. 

* `CLUSTER-COUNT` is the maximum number of clusters to upgrade in parallel within an AZ. 
    The `CLUSTER-COUNT` must be less than your TKGI tile > TKGI API Service > <strong>Worker VM Max in Flight</strong> value. 
    For example, if your TKGI tile <strong>Worker VM Max in Flight</strong> value remains the default of <code>4</code>, 
    run <code>upgrade-clusters</code> with a <code>--max-in-flight</code> argument value less than <code>4</code>.  
      
Considerations when running `tkgi upgrade-clusters`:  

* If an upgrade for a cluster in the `--clusters` list fails, the `tkgi upgrade-clusters` job continues to a subsequent cluster in the list.  
* Clusters are upgraded serially if `--max-in-flight` is not set.  
* If the count of names in the `--clusters` list is more than the `--max-in-flight` value, 
    the first set of clusters are upgraded in parallel and subsequent clusters are queued. 
    As the initial cluster upgrades complete, the remaining clusters are pulled from the queue and upgraded in parallel.  
* To run the cluster upgrade job as a background task, remove the `--wait` argument.  

<p class="note"><strong>Note:</strong>
The nodes in each upgraded cluster are always processed serially.  
</p>

For example:

```
$ tkgi upgrade-clusters --clusters k8-cluster-000,k8-cluster-001,k8-cluster-002 --max-in-flight 2  --wait  
  
You are about to upgrade k8-cluster-000, k8-cluster-001 and k8-cluster-002.  
Warning: This operation may be long running and may block further operations on the cluster(s) until complete  
  
Continue? (y/n):y  
Your taskID for the upgrade task is: d772aba0-2670-4fba-b26c-044b19d6ab60  
Started upgrading cluster: k8-cluster-000  
Started upgrading cluster: k8-cluster-001  
Finished upgrading cluster: k8-cluster-000  
Started upgrading cluster: k8-cluster-002  
Finished upgrading cluster: k8-cluster-001  
Finished upgrading cluster: k8-cluster-002  
Upgrade task d772aba0-2670-4fba-b26c-044b19d6ab60 is done.  
```

####<a id='upgrade-clusters-errors'></a> Upgrade Clusters With Canaries

To upgrade multiple clusters and automatically stop upgrading clusters if a cluster upgrade fails, 
specify your cluster list as canary clusters. 
You can specify one or more clusters as canary clusters.  

<<<<<<< HEAD
To upgrade multiple clusters with one or more canary clusters, run the following command:
=======
To upgrade multiple clusters with one or more canary clusters:  

1. Run the following command:  
>>>>>>> 9686d90a... [#183037278] PKS-5835: Nodes UPDATE simultaneously and UPGRADE serially

```
tkgi upgrade-clusters --canaries CANARY-CLUSTER-NAMES --clusters CLUSTER-NAMES --wait
```
Where:

* `CANARY-CLUSTER-NAMES` is a comma-delimited list of the names of the Kubernetes clusters you want to upgrade as canary clusters. 

<<<<<<< HEAD
* `CLUSTER-NAMES` is a comma-delimited list of Kubernetes clusters to upgrade if all canary clusters successfully upgrade.  
=======
    * `CLUSTER-NAMES` is a comma-delimited list of Kubernetes clusters to upgrade if all canary clusters successfully upgrade.  
    
    <p class="note"><strong>Note:</strong> 
    The <code>--clusters</code> argument is required. 
    </p>
>>>>>>> 9686d90a... [#183037278] PKS-5835: Nodes UPDATE simultaneously and UPGRADE serially

Considerations when running `tkgi upgrade-clusters` with a `--canaries` list:  

* The clusters specified in the `--canaries` list are upgraded prior to upgrading the clusters in your `--clusters` list.  
* If a canary cluster upgrade fails, the entire `tkgi upgrade-clusters` job stops.  
* If a `--clusters` list cluster upgrade fails, the `tkgi upgrade-clusters` job continues to a subsequent cluster in the list.  
* To configure <code>tkgi upgrade-clusters</code> to stop for any cluster upgrade failure, 
    specify only one cluster in your <code>--clusters</code> list and 
    the remaining clusters in your <code>--canaries</code> list.  
* Canary clusters are always upgraded serially. 
    To upgrade clusters in the `--clusters` list in parallel, see [Upgrade Clusters in Parallel](#upgrade-clusters-parallel) above.  
* To run the cluster upgrade job as a background task, remove the `--wait` argument.  


<p class="note"><strong>Note:</strong>
The nodes in each upgraded cluster are always processed serially.  
</p>


For example:

<pre class="terminal">
$ tkgi upgrade-clusters --canaries k8-cluster-dev,k8-cluster-000,k8-cluster-001  --clusters k8-cluster-002  --wait
<br>
You are about to upgrade k8-cluster-dev k8-cluster-000, k8-cluster-001 and k8-cluster-002.
Warning: This operation may be long running and may block further operations on the cluster(s) until complete

Continue? (y/n):y
Your taskID for the upgrade task is: ce31a1bb-380a-453f-afa0-835ffa1ce6ac
Started upgrading cluster: k8-cluster-000
Upgrading cluster succeeded: k8-cluster-000
Started upgrading cluster: k8-cluster-001
Upgrading cluster succeeded: k8-cluster-001
Started upgrading cluster: k8-cluster-dev
Upgrading cluster failed: k8-cluster-dev
Upgrade task ce31a1bb-380a-453f-afa0-835ffa1ce6ac is done.
</pre>


##<a id='manage-upgrade'></a> Manage Your Cluster Upgrade Job

You can use the <%= vars.k8s_runtime_abbr %> CLI to monitor and manage your <%= vars.product_tile %>-provisioned Kubernetes cluster 
upgrade jobs.  

###<a id='monitor-upgrades'></a> Monitor Your Clusters

To review the status of the actions being performed on your clusters, 
run the following command:

```
tkgi clusters
```

For example:
<pre class="terminal">
$ tkgi clusters
<br>
Upgrade is available to <%= vars.k8s_runtime_abbr %> Version: 1.9.0-build.1
<br>
<%= vars.k8s_runtime_abbr %> Version     Name               k8s Version  Plan Name  UUID                                  Status       Action
1.9.0-build.1   k8-cluster-000     1.18.8       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  succeeded    UPGRADE
1.9.0-build.1   k8-cluster-001     1.18.8       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  failed       UPGRADE
1.9.0-build.1   k8-cluster-002     1.18.8       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  in progress  UPGRADE
1.9.0-build.1   k8-cluster-003     1.18.8       small      9527ebaa-e2fa-422f-a52b-de3c3f0e39a4  queued       UPGRADE
</pre>

###<a id='monitor-upgrade-job'></a> Monitor Your Cluster Upgrade Job

To review the status of your `upgrade-clusters` job, run the following command:

```
tkgi task TASKID
```
Where `TASKID` is the ID of the task that was returned when you ran `tkgi upgrade-clusters`.

For example:
<pre class="terminal">
$ tkgi task ce31a1bb-380a-453f-afa0-835ffa1ce6ac
<br>
Your upgrade task is: done
<br>
Name           Status     Start time                     End time                            isCanary
k8-cluster-000 succeeded  Mon, 14 Oct 2019 12:00:00 PDT  Mon, 14 Oct 2019 12:19:54 PDT       true
k8-cluster-001 failed     Mon, 14 Oct 2019 12:20:00 PDT  ---                                 true
</pre>

###<a id='stop-upgrade-job'></a> Stop Your Cluster Upgrade Job

To cancel a running `upgrade-clusters` job, run the following <%= vars.k8s_runtime_abbr %> CLI command:

```
tkgi cancel-task TASKID
```
Where `TASKID` is the ID of the task that was returned when you ran `tkgi upgrade-clusters`.

<p class="note warning"><strong>Warning:</strong> <code>tkgi cancel-task</code> does not cancel cluster upgrades currently in progress. This command only cancels a job's pending cluster upgrades.
</p>


##<a id='after-upgrade-clusters'></a>After Upgrading Clusters

###<a id='restore-cluster-sizing'></a>(Optional) Restore Cluster Sizing
 
If you scaled your cluster up for the upgrade and you prefer to restore your cluster to its original sizing, 
you can now scale the cluster back down to its previous configuration. 
<%= vars.recommended_by %> recommends that you not scale down your clusters and continue to run them with 
recommended configurations, reducing the chance of a future outage.  
