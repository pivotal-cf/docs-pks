
<% if vars.product_version == "COMMENTED"  %>
<%# WARNING!!!! %>
<%# DO NOT ADD READBILITY LINE WRAPPING TO THIS CONTENT THE LONG LINES MUSt REMAIN TO CORRECTLY FORMAT THE FOLLOWING SECTION'S MARKDOWN CONTENT %>
<%# <!-- WARNING!!!! --> %>
<% end %>

In **In-Cluster Monitoring**,  you can configure one or more observability
components and integrations that run in Kubernetes clusters and capture logs
and metrics about your workloads.
For more information, see
[Monitoring Workers and Workloads](in-cluster-monitoring.html).

![Cluster Monitoring pane](images/cluster-monitoring.png)

To configure in-cluster monitoring:

* To configure Wavefront, see [Wavefront](#wavefront).
<% if current_page.data.iaas == "vSphere" || current_page.data.iaas == "vSphere-NSX-T" %>
* To configure cAdvisor, see
[VMware vRealize Operations Management Pack for Container Monitoring](#realize).
<% else %>
* To configure cAdvisor, see [cAdvisor](#realize).
<% end %>
* To configure sink resources, see:
  * [Metric Sink Resources](#metric-sinks)
  * [Log Sink Resources](#log-sinks)

    You can enable both log and metric sink resources or only one of them.

####<a id='wavefront'></a> Wavefront

You can monitor Kubernetes clusters and pods metrics externally using the integration with <a href="https://docs.wavefront.com">Wavefront by VMware</a>.  

<p class="note"><strong>Note:</strong> Before you configure Wavefront integration, you must have an active Wavefront account and access to a Wavefront instance. You provide your Wavefront access token during configuration. For additional information, see the <a href="https://docs.wavefront.com/integrations_tkgi.html">Wavefront documentation</a>.<br />
To use Wavefront with Windows worker-based clusters, developers must install Wavefront to their clusters manually, using Helm.</em></p>

To enable and configure Wavefront monitoring:  

1. In the <%= vars.product_tile %> tile, select **In-Cluster Monitoring**.
1. Under **Wavefront Integration**, select **Yes**.
1. Under **Wavefront URL**, enter the URL of your Wavefront subscription. For example:
    <pre>
    https<span>:</span>//try.wavefront.com/api
    </pre>
1. Under **Wavefront Access Token**, enter the API token for your Wavefront subscription.
1. (Optional) For installations that require a proxy server for outbound Internet access, enable access by entering values for **HTTP Proxy Host**, **HTTP Proxy Port**, **Proxy username**, and **Proxy password**.
1. Click **Save**.

The <%= vars.product_tile %> tile does not validate your Wavefront configuration settings. To verify your setup, look for cluster and pod metrics in Wavefront.

<% if current_page.data.iaas == "vSphere" || current_page.data.iaas == "vSphere-NSX-T" %>
####<a id='realize'></a> VMware vRealize Operations Management Pack for Container Monitoring

You can monitor <%= vars.product_short %> Kubernetes clusters with VMware vRealize Operations Management Pack for Container Monitoring. 

To integrate <%= vars.product_short %> with VMware vRealize Operations Management Pack for Container Monitoring, you must deploy a container running [cAdvisor](https://github.com/google/cadvisor) in your <%= vars.k8s_runtime_abbr %> deployment.

cAdvisor is an open source tool that provides monitoring and statistics for Kubernetes clusters.

To deploy a cAdvisor container:

1. Select **In-Cluster Monitoring**.
1. Under **Deploy cAdvisor**, select **Yes**.
1. Click **Save**.

For more information about integrating this type of monitoring with <%= vars.k8s_runtime_abbr %>, see the [VMware vRealize Operations Management Pack for Container Monitoring User Guide](https://docs.vmware.com/en/Management-Packs-for-vRealize-Operations-Manager/1.4/container-monitoring/GUID-BD6B5510-4A16-412D-B5AD-43F74C300C91.html) and [Release Notes](https://docs.vmware.com/en/Management-Packs-for-vRealize-Operations-Manager/1.4/rn/Container-Monitoring-Release-Notes.html) in the VMware documentation.
<% else %>
####<a id='realize'></a> cAdvisor 

cAdvisor is an open source tool for monitoring, analyzing, and exposing Kubernetes container resource usage and performance statistics.

To deploy a cAdvisor container:

1. Select **In-Cluster Monitoring**.
1. Under **Deploy cAdvisor**, select **Yes**.
1. Click **Save**.

<p class="note"><strong>Note:</strong> For information about configuring cAdvisor to monitor your running Kubernetes containers, see 
    <a href="https://github.com/google/cadvisor#cadvisor/">cAdvisor</a> in the cAdvisor GitHub repository. 
    For general information about Kubernetes cluster monitoring, see 
    <a href="https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/#resource-metrics-pipeline">Tools for Monitoring Resources</a> 
    in the Kubernetes documentation.</p>
<% end %>

####<a id='metric-sinks'></a> Metric Sink Resources

You can configure TKGI-provisioned clusters to send Kubernetes node metrics and
pod metrics to metric sinks. For more information about metric sink resources
and what to do after you enable them in the tile, see
[Sink Resources](in-cluster-monitoring.html#sinks) in
_Monitoring Workers and Workloads_.

To enable clusters to send Kubernetes node metrics and pod metrics to metric
sinks:

1. In **In-Cluster Monitoring**, select **Enable Metric Sink Resources**.
If you enable this checkbox, <%= vars.product_short %> deploys Telegraf as a
`DaemonSet`, a pod that runs on each worker node in all your Kubernetes clusters.
1. (Optional) To enable Node Exporter to send worker node metrics to metric
sinks of kind `ClusterMetricSink`, select **Enable node exporter on workers**.
If you enable this checkbox, <%= vars.product_short %> deploys Node Exporter as
a `DaemonSet`, a pod that runs on each worker node in all your Kubernetes
clusters.

    For instructions on how to create a metric sink of kind `ClusterMetricSink`
    for Node Exporter metrics, see
    [Create a ClusterMetricSink Resource for Node Exporter Metrics](create-sinks.html#node-exporter) in _Creating and Managing Sink Resources_.
1. Click **Save**.

####<a id='log-sinks'></a> Log Sink Resources

You can configure TKGI-provisioned clusters to send Kubernetes API events and
pod logs to log sinks. For more information about log sink resources and what to
do after you enable them in the tile, see
[Sink Resources](in-cluster-monitoring.html#sinks) in
_Monitoring Workers and Workloads_.  

To enable clusters to send Kubernetes API events and pod logs to log sinks:  

1. Select **Enable Log Sink Resources**. If you enable this checkbox,
<%= vars.product_short %> deploys Fluent Bit as a `DaemonSet`, a pod that runs
on each worker node in all your Kubernetes clusters.  
1. Click **Save**.  

