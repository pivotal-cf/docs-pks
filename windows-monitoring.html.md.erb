---
title: Monitoring Windows Worker Clusters and Nodes
owner: PKS
---

This topic describes how to set up monitoring tools to capture
metrics from Windows worker-based Kubernetes clusters
deployed by <%= vars.product_short %> (<%= vars.k8s_runtime_abbr %>).

## <a id='overview'></a> Overview

You can use any of the following monitoring tools to capture
metrics from <%= vars.k8s_runtime_abbr %> Windows worker-based Kubernetes clusters:  

* [Healthwatch](#healthwatch)
* [Wavefront](#wavefront)
* [Prometheus with Grafana](#prometheus)

## <a id='healthwatch'></a>Healthwatch

You can use the [Healthwatch](https://docs.pivotal.io/healthwatch/index.html) Healthwatch Exporter for <%= vars.k8s_runtime_abbr %> tile
to monitor the health of the <%= vars.k8s_runtime_abbr %> Control Plane
and your Linux and Windows cluster control plane nodes.

Healthwatch enables you to monitor the functionality of your <%= vars.k8s_runtime_abbr %> environment
and can be configured to expose metrics to a service or database external to your Ops Manager
foundation.
For more information, see [Overview of the Healthwatch Exporter for TKGI Tile](https://docs.pivotal.io/healthwatch/index.html#exporter-tkgi).

To configure cluster discovery in Healthwatch, see
[Configuring TKGI Cluster Discovery](https://docs.pivotal.io/healthwatch/configuring/optional-config/configuring-cluster-discovery.html)
in the Healthwatch documentation.

## <a id='wavefront'></a> Wavefront

Wavefront runs as an external service that you set up to monitor Windows worker-based clusters the same way that you set it up to monitor clusters running Linux worker nodes:

1. Install Helm on your local machine, if you do not already have it, by following [Install and Configure Helm](./helm.html#install-helm) in the topic _Using Helm with Tanzu Kubernetes Grid Integrated Edition_.

1. Use the Helm CLI to deploy Wavefront to the target cluster:

    ```
    helm install wavefront wavefront/wavefront --namespace wavefront \
    --set clusterName=CLUSTER-NAME \
    --set wavefront.url=https://INSTANCE-NAME.wavefront.com \
    --set wavefront.token=API-TOKEN \
    --set collector.usePKSPrefix=true \
    --set collector.useDaemonset=false
    ```

    Where:
    * `CLUSTER-NAME` is the name of your Kubernetes cluster.
    * `INSTANCE-NAME` is the subdomain name for your Wavefront instance.
    * `API-TOKEN` is the Wavefront API token for your Wavefront subscription.

1. Do one of the following:
  - Configure Wavefront Integration in Ops Manager using the [VMware Tanzu Kubernetes Grid Integrated Edition Integration](https://docs.wavefront.com/tkgi.html) procedure in the Wavefront documentation.
  - Set up a metric sink to send metrics to Wavefront following the instructions in [Creating and Managing Sink Resources](./create-sinks.html).

## <a id='prometheus'></a> Prometheus with Grafana

[Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/grafana/) are open source tools you can use
to monitor your Kubernetes Windows clusters and worker nodes, and to visualize and alert on events occurring in those
clusters and worker nodes.

### <a id='monitor-prerequisites'></a> Prerequisites

Before installing Prometheus ensure you have installed kubectl. 
For more information about installing kubectl, 
see [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) 
in the Kubernetes documentation.

For additional Prometheus and Grafana prerequisites, see 
[Prerequisites](https://github.com/prometheus-operator/kube-prometheus#prerequisites) 
in the _kube-prometheus_ GitHub repository.

### <a id='overview-prometheus'></a> Overview

To monitor Windows clusters and worker node metrics using Prometheus and Grafana:  

1. [Install Prometheus and Grafana](#install-prometheus)
1. [Install the Windows Node Exporter](#install-node-exporter)
1. [Administer Prometheus and Grafana](#post-install-admin)  

## <a id='install-prometheus'></a> Install Prometheus and Grafana  

To install Prometheus and Grafana: 

1. [Download the Prometheus Source Code](#download-source)  
1. [Generate Your Prometheus Dashboard Configuration](#monitor-rules)  
1. [Generate Monitoring Rules](#monitor-rules)
1. [Deploy Prometheus and Grafana](#deploy-prometheus) 
1. [Verify Grafana is Running ](#verify-grafana)


#### <a id='download-source'></a> Download the Prometheus Source Code  

To download the Prometheus source code:

1. Clone or download the Prometheus operator source code from 
[Latest release](https://github.com/prometheus-operator/kube-prometheus/releases) 
in the `prometheus-operator/kube-prometheus` GitHub repository.

1. Clone or download the Prometheus monitoring mixin for kubernetes source code from  
[Latest release](https://github.com/kubernetes-monitoring/kubernetes-mixin/releases) 
in the `kubernetes-monitoring/kubernetes-mixin` GitHub repository.

#### <a id='monitor-rules'></a> Generate Your Prometheus Dashboard Configuration

To generate a Prometheus dashboard configuration:  

1. Open a command line.
1. Change directory to the `kubernetes-mixin/dashboards` source code directory.
1. Edit the `dashboards.libsonnet` configuration file.
1. To add the Windows dashboard to the configuration add the following to the `dashboards.libsonnet` file:

    ```
    (import 'windows.libsonnet')
    ```
1. Save the file.
1. Change directory to the `kubernetes-mixin` source code root directory.
1. To generate the Prometheus dashboard, run:

    ```
    make dashboards_out
    ```
1. Review the `kubernetes-mixin/dashboards_out` directory and confirm the following Windows dashboard definition files were created:  

    ```
    k8s-resources-windows-cluster.json
    k8s-resources-windows-namespace.json
    k8s-resources-windows-pod.json
    k8s-windows-cluster-rsrc-use.json
    k8s-windows-node-rsrc-use.json
    ```

#### <a id='monitor-rules'></a> Generate Monitoring Rules

To generate Prometheus monitoring rules:  

1. Open a command line.
1. Copy the rule definition file from the `kubernetes_mixin/rules` directory to the `kube-prometheus/jsonnet/kube-prometheus/rules` directory:

    ```
    cp KUBERNETES-MIXIN-PATH/rules/windows.libsonnet PROMETHEUS-OP-PATH/jsonnet/kube-prometheus/rules/windows.libsonnet
    ```

    Where:  
    * `KUBERNETES-MIXIN-PATH` is the `kubernetes_mixin` source directory.  
    * `PROMETHEUS-OP-PATH` is the Prometheus operator path.  
<%#
1. Copy the Windows dashboard definition files generated above to the Prometheus operator directory.
%>
1. Change directory to the `kube-prometheus/jsonnet/kube-prometheus/rules` source code directory.
1. Edit the `rules.libsonnet` configuration file.
1. To add the Windows rule to the configuration add the following to the `rules.libsonnet` file:

    ```
    (import 'windows.libsonnet')
    ```
1. Save the file.
1. Change directory to the `kube-prometheus` Prometheus source code root directory.
1. To generate all rules, run:

    ```
    make manifests
    ```


#### <a id='deploy-prometheus'></a> Deploy Prometheus and Grafana  

To deploy Prometheus and Grafana:

1. Get `kubeconfig` for your Windows cluster. 
For more information, see [Retrieving Cluster Credentials and Configuration](cluster-credentials.html).  
<%#
1. Clone or download the Prometheus operator source from the
[kube-prometheus](https://github.com/prometheus-operator/kube-prometheus)
GitHub repository. 
%> 
1. Open a command line.
1. Change directory to the `kube-prometheus` Prometheus source code root directory. 
1. To deploy Prometheus and Grafana, run:  

    ```
    kubectl create -f manifests/setup
    until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
    kubectl create -f manifests/
    ```
1. To forward the Prometheus and Grafana ports to localhost run:  

    ```
    kubectl --namespace monitoring port-forward svc/prometheus-k8s PROMETHEUS-PORT
    kubectl --namespace monitoring port-forward svc/grafana GRAFANA-PORT
    ```

    Where:  
    * `PROMETHEUS-PORT` is a localhost port for Prometheus, for example `9090`.
    * `GRAFANA-PORT` is a localhost port for Grafana, for example `3000`.

For more information about installing Prometheus and Grafana, see [Quickstart](https://github.com/prometheus-operator/kube-prometheus#quickstart) 
in the _prometheus-operator/kube-prometheus_ GitHub repository.  

### <a id='verify-grafana'></a> Verify Grafana is Running  

To verify Grafana is running:  

1. To open the Grafana Dashboard, open a browser to:  

    ```
    http://localhost:GRAFANA-PORT
    ```

    Where `GRAFANA-PORT` is the localhost port for Grafana, for example `3000`.  

1. To log in to the Grafana Dashboard authenticate with user `admin`, 
password `admin`. 
1. To view Kubelet metrics from all of your windows workers, navigate
to **Dashboard** > **Default** > **Kubernetes/Kubelet**.  

### <a id='install-node-exporter'></a> Install the Windows Node Exporter

To monitor Windows worker node metrics, you need endpoints, the Windows Node Exporter service, 
and the Windows Node Exporter service monitor. 

To install and configure the Windows Node Exporter:  

1. [Deploy the Windows Node Exporter](#deploy-node-exporter)
1. [Configure the Windows Node Exporter](#configure-node-exporter)
1. [Set Up the Grafana Windows Node Dashboard](#set-up-node-exporter-grafana-dashboard)  

#### <a id='deploy-node-exporter'></a> Deploy the Windows Node Exporter

The Windows Node Exporter must be installed on all of the Windows worker nodes you want to monitor.

To determine the names and IP addresses of all of your Windows worker nodes:

1. Open a command line.
1. Run the following:

    ```
    kubectl get nodes -L spec.ip
    ```
1. Note the names and IP addresses of the Windows worker nodes.  

<br>
To deploy the Windows Node Exporter to all of your Windows worker nodes, 
repeat the steps below for each Windows worker node you want to monitor:  

1. Start an SSH session to the Windows worker.  
1. To download the [`windows_exporter-0.13.0-amd64.msi`]
(https://github.com/prometheus-community/windows_exporter/releases/download/v0.13.0/windows_exporter-0.13.0-amd64.msi) 
to the worker from [v0.13.0](https://github.com/prometheus-community/windows_exporter/releases/) 
in the _prometheus-community/windows\_exporter_ repository on GitHub:  

    ```
    Powershell Invoke-WebRequest https://github.com/prometheus-community/windows_exporter/releases/download/v0.13.0/windows_exporter-0.13.0-amd64.msi ^
        -OutFile DOWNLOAD-PATH 
    ```

    Where `DOWNLOAD-PATH` is the full path to the output location and filename for the retrieved file. 
    For example, `c:\windows_exporter-0.13.0-amd64.msi`.

1. To start the `windows_exporter` msi as a Windows service, open a command line:  

    ```
    msiexec /i DOWNLOAD-PATH ENABLED_COLLECTORS="cpu,cs,logical_disk,net,os,system,container,memory"
    ```

    Where `DOWNLOAD-PATH` is the full path to the output location and filename for the retrieved file. 
    For example, `c:\windows_exporter-0.13.0-amd64.msi`.


#### <a id='configure-node-exporter'></a> Configure the Windows Node Exporter

To support monitoring by Prometheus and Grafana, the Windows Node Exporter service must be configured 
to access your Windows worker node metrics.

To configure the Windows Node Exporter:  

1. Create a file named `windows-exporter.yml`.
1. Populate the file with the following:

    ```
    apiVersion: v1
    kind: Endpoints
    metadata:
      labels:
        k8s-app: APP-NAME
      name: ENDPOINT-NAME
      namespace: kube-system
    subsets:
    - addresses:
      - ip: NODE-IP
        targetRef:
          kind: Node
          name: NODE-NAME
      ports:
      - name: http-metrics
        port: 9182
        protocol: TCP
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        k8s-app: APP-NAME
      name: SERVICE-NAME
      namespace: kube-system
    spec:
      clusterIP: None
      ports:
      - name: http-metrics
        port: 9182
        protocol: TCP
        targetPort: 9182
      sessionAffinity: None
      type: ClusterIP
    ---
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      labels:
        k8s-app: APP-NAME
      name: SERVICEMONITOR-NAME
      namespace: monitoring
    spec:
      endpoints:
      - interval: 30s
        port: http-metrics
      jobLabel: k8s-app
      namespaceSelector:
        matchNames:
        - kube-system
      selector:
        matchLabels:
          k8s-app: APP-NAME
    ```

    Where:  
    * `APP-NAME` is the name for the Kubernetes app.  
    * `ENDPOINT-NAME` is the name for the endpoint.  
    * `SERVICE-NAME` is the name for the service.  
    * `SERVICEMONITOR-NAME` is the name for the service monitor.  
    * `NODE-IP` is the IP address of the Windows worker node to monitor.  
    * `NODE-NAME` is the name of the Windows worker node to monitor.  

    For example:

    <pre class="terminal">
    apiVersion: v1
    kind: Endpoints
    metadata:
      labels:
        k8s-app: wmi-exporter
      name: wmi-exporter
      namespace: kube-system
    subsets:
    - addresses:
      - ip: 192.168.1.1
        targetRef:
          kind: Node
          name: nodeone
      - ip: 192.168.1.1
        targetRef:
          kind: Node
          name: nodetwo
      ports:
      - name: http-metrics
        port: 9182
        protocol: TCP
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        k8s-app: wmi-exporter
      name: wmi-exporter
      namespace: kube-system
    spec:
      clusterIP: None
      ports:
      - name: http-metrics
        port: 9182
        protocol: TCP
        targetPort: 9182
      sessionAffinity: None
      type: ClusterIP
    ---
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      labels:
        k8s-app: wmi-exporter
      name: wmi-exporter
      namespace: monitoring
    spec:
      endpoints:
      - interval: 30s
        port: http-metrics
      jobLabel: k8s-app
      namespaceSelector:
        matchNames:
        - kube-system
      selector:
        matchLabels:
          k8s-app: wmi-exporter
    </pre>


1. Create an additional `subsets.addresses` item for each Windows worker node you want to monitor: 

    ```
    subsets:
    - addresses:
      - ip: NODE-ONE-IP
        targetRef:
          kind: Node
          name: NODE-ONE-NAME
      - ip: NODE-TWO-IP
        targetRef:
          kind: Node
          name: NODE-TWO-NAME
      - ip: NODE-THREE-IP
        targetRef:
          kind: Node
          name: NODE-THREE-NAME
    ```

    Where:  
    * `NODE-ONE-IP` is the IP address of the first Windows worker node to monitor.
    * `NODE-ONE-NAME` is the name of the first Windows worker node to monitor.
    * `NODE-TWO-IP` is the IP address of the second Windows worker node to monitor.
    * `NODE-TWO-NAME` is the name of the second Windows worker node to monitor.
    * `NODE-THREE-IP` is the IP address of the third Windows worker node to monitor.
    * `NODE-THREE-NAME` is the name of the third Windows worker node to monitor.


1. Save your changes to the `windows-exporter.yml` file.  
1. To create the Windows node exporter objects, run:

    ```
    kubectl create -f windows-exporter.yml
    ```
1. Wait a few seconds for the service to be ready.
1. To verify your new targets in Prometheus, open a browser to:

    ```
    http://localhost:PROMETHEUS-PORT/targets
    ```

    Where `PROMETHEUS-PORT` is the localhost port for Prometheus, for example `9090`.

<%#
#### < a id='configure-node-exporter-grafana' >< / a > Configure Grafana to Monitor the Windows Node Exporter
%>
#### <a id='set-up-node-exporter-grafana-dashboard'></a> Set Up the Grafana Windows Node Dashboard  

To import the dashboard files generated above to Grafana:  

1. Open a browser to your Grafana dashboard.
1. To open the **Import** tab, click **+** on the Grafana side menu.
1. Click **Upload .json file**.  
1. Upload the five dashboard files from the `kubernetes-mixin/dashboards_out` directory one at a time:  

    ```
    k8s-resources-windows-cluster.json
    k8s-resources-windows-namespace.json
    k8s-resources-windows-pod.json
    k8s-windows-cluster-rsrc-use.json
    k8s-windows-node-rsrc-use.json
    ```
1. To verify the dashboard, open a browser to your Grafana dashboard.  

If you prefer to use a different Grafana dashboard, 
you can use and configure the preferred dashboard to monitor the Windows Node Exporter. 
For more information, see [Dashboards](https://grafana.com/grafana/dashboards) 
at the Grafana Labs site.

<%#
#### < a i d='set-up-node-exporter-grafana-dashboard' >< / a > Set Up the Grafana Windows Node Dashboard  

To monitor Windows Node Exporter metrics in Grafana, 
add the Windows Node Dashboard to the Grafana Dashboard:  

1. Open a browser to your Grafana dashboard.
1. To open the **Import** tab, click **+** on the Grafana side menu.
1. To import the [Windows Node](https://grafana.com/grafana/dashboards/12422) 
    dashboard from the Grafana Labs [Dashboards](https://grafana.com/grafana/dashboards) 
    site, type `12422` in **Import via grafana.com**.
1. Click **Load**. 
1. Select `Prometheus` as the dashboard source.
%>

### <a id='post-install-admin'></a> Administer Prometheus and Grafana

After completing the minimum installation steps described above:  

* Change your Grafana installation's account authentication to not use the default `admin/admin` user/password pair.  
* Review the Grafana and Prometheus documentation for any additional steps you should complete:

    * For information about managing Grafana, see [Administration](https://grafana.com/docs/grafana/latest/administration/) in the Grafana documentation.  
    * For information about managing Prometheus, see [Customizing Kube-Prometheus](https://github.com/prometheus-operator/kube-prometheus#customizing-kube-prometheus)
    in the kube-prometheus documentation.  

