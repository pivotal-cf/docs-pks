---
title: TKGI API Authentication
owner: TKGI
---

This topic describes how the <%= vars.product_full %> (<%= vars.k8s_runtime_abbr %>) API works with User Account and Authentication (UAA) to manage <%= vars.k8s_runtime_abbr %> deployment authentication and authorization.  

##<a id='authenticating'></a> Authentication of <%= vars.control_plane %> Requests

Before users can log in and use the <%= vars.k8s_runtime_abbr %> CLI, you must configure <%= vars.control_plane %> access with UAA. For more information, 
see [Managing Tanzu Kubernetes Grid Integrated Edition Users with UAA](manage-users.html) and [Logging in to <%= vars.product_short %>](login.html).

You use the UAA Command Line Interface (UAAC) to target the UAA server and request an access token for the UAA admin user.
If your request is successful, the UAA server returns the access token.
The UAA admin access token authorizes you to make requests to the <%= vars.control_plane %> using the <%= vars.k8s_runtime_abbr %> CLI and grant cluster access to new or existing users.

When a user with cluster access logs in to the <%= vars.k8s_runtime_abbr %> CLI, the CLI requests an access token for the user from the UAA server.
If the request is successful, the UAA server returns an access token to the <%= vars.k8s_runtime_abbr %> CLI.
When the user runs <%= vars.k8s_runtime_abbr %> CLI commands, for example, `tkgi clusters`, the CLI sends the request to the <%= vars.control_plane %> server and includes the user's UAA token.

The <%= vars.control_plane %> sends a request to the UAA server to validate the user's token.
If the UAA server confirms that the token is valid, the <%= vars.control_plane %> uses the cluster information from the <%= vars.k8s_runtime_abbr %> broker to respond to the request.
For example, if the user runs `tkgi clusters`, the CLI returns a list of the clusters that the user is authorized to manage.

##<a id='routing'></a>Routing to the <%= vars.control_plane %> VM

The <%= vars.control_plane %> server and the UAA server use different port numbers on the API VM.
For example, if your <%= vars.control_plane %> domain is `api.tkgi.example.com`, you can reach your <%= vars.control_plane %> and UAA servers at the following URLs:

<table>
  <tr>
    <th>Server</th>
    <th>URL</th>
  </tr>
  <tr>
    <td><%= vars.control_plane %></td>
    <td>api.tkgi.example.com:9021</td>
  </tr>
  <tr>
    <td>UAA</td>
    <td>api.tkgi.example.com:8443</td>
  </tr>
</table>

Refer to **Ops Manager** > **<%= vars.product_tile %> tile** > **<%= vars.control_plane %>** > **API Hostname (FQDN)** for your <%= vars.control_plane %> domain.

Load balancer implementations differ by deployment environment.
For <%= vars.product_short %> deployments on GCP, AWS, or vSphere without NSX-T, you configure a load balancer to access 
the <%= vars.control_plane %> when you install the <%= vars.product_tile %> tile.
For example, see [Configuring <%= vars.control_plane %> Load Balancer](./vsphere-configure-api.html).

For overview information about load balancers in <%= vars.product_short %>, see [Load Balancers in <%= vars.product_short %> Deployments without NSX-T](about-lb.html#without-nsx-t).
