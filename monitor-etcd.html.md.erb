---
title: Configuring Telegraf in TKGI
owner: TKGI
---

This topic describes how to configure Telegraf in
<%= vars.product_full %> (<%= vars.k8s_runtime_abbr %>).

## <a id="overview"></a>Overview

You can configure Telegraf to collect metrics from TKGI API,
control plane node, and worker node VMs and send the metrics to a monitoring service,
such as Wavefront or Datadog.

For more information about these metrics, see
[Metrics: Telegraf](host-monitoring.html#telegraf) in
_Monitoring <%= vars.k8s_runtime_abbr %> and
<%= vars.k8s_runtime_abbr %>-Provisioned Clusters_.

## <a id="collect"></a>Collect Metrics Using Telegraf

To collect metrics using Telegraf:

1. Create a configuration file for your output plugin.
See [Create a Configuration File](#toml) below.
1. Configure Telegraf in the <%= vars.product_tile %> tile.
See [Configure Telegraf in the Tile](#connect) below. 

### <a id="toml"></a> Create a Configuration File 

To connect a monitoring service to <%= vars.k8s_runtime_abbr %>, you must create a configuration file for the service. The configuration file is written in a TOML format and consists of key-value pairs. After you create your configuration file, you can enter the file into the <%= vars.product_tile %> tile to connect the service. 

To create a configuration file for your monitoring service:

1. Locate the required format for your monitoring service in the `README.md` file for your service in [telegraf](https://github.com/influxdata/telegraf/tree/1.11.0/plugins/outputs) in GitHub.
    For example, if you want to collect metrics from etcd, the etcd documentation recommends using the open-source Prometheus monitoring service.

1. Create your configuration file using the required format of your monitoring service.
For example, if you want to create a configuration file for an HTTP output plugin, create a file similar to the following: 

    ```
    [[outputs.http]]
       url="https://example.com"
       method="POST"
       data_format="json"
    [[processors.override]]
      [processors.override.tags]
        director = "bosh-director-1"
    ```
    <p class="note"><strong>Note:</strong>  You can add tags to your configuration file to label etcd metrics. For example, the above code snippet adds a <code>bosh-director-1</code> tag to the etcd metrics. If you have multiple BOSH Directors, <%= vars.recommended_by %> recommends adding tags to filter your metrics in your monitoring service. </p>

### <a id="connect"></a> Configure Telegraf in the Tile

To configure <%= vars.k8s_runtime_abbr %> to use Telegraf for metric collection:

1. Navigate to the **<%= vars.product_tile %>** tile > **Settings** > **Host Monitoring**.

1. Under **Enable Telegraf Outputs?**, select **Yes**.  
  ![Host Monitoring pane](images/host-monitoring-telegraf.png)  
1. Configure Telegraf output settings as described in the table below.

    <table class="nice">
      <col width="30%">
      <col width="70%">
      <tr>
        <th>Configuration Setting</th>
        <th>Description...to send these metrics to your monitoring service</th>
      </tr>
      <tr>
        <td>
          <strong>Prometheus input plugin Metric version</strong>
        </td>
        <td>
          Controls the metrics mapping from Prometheus to telegraf when scraping metrics using the Prometheus input plugin. 
          The Prometheus input plugin scrapes the following metrics: 
          <code>node_exporter</code>, <code>kube_apiserver</code>, <code>kube_controller_manager</code>, <code>kube_scheduler</code>, and <code>etcd metrics</code>. 
          <br><br>
          Your Prometheus client must be configured with the matching <code>metric_version</code> setting. 
          For more information, 
          see <a href="https://github.com/influxdata/telegraf/blob/v1.20.3/plugins/inputs/prometheus/README.md">Prometheus Input Plugin</a> 
          in the telegraf GitHub repository.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Enable node exporter on TKGI API</strong>
        </td>
        <td>
          Enable to send Node Exporter metrics from the TKGI API VM.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Enable node exporter on control plane</strong>
        </td>
        <td>
          Enable to send Node Exporter metrics from Kubernetes control plane nodes.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include etcd metrics</strong>
        </td>
        <td>
          Enable to send etcd server and debugging metrics.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Enable node exporter on worker</strong>
        </td>
        <td>
          Enable to send Node Exporter metrics from Kubernetes worker nodes.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include Kubernetes Controller Manager metrics</strong>
        </td>
        <td>
          Enable to send Kubernetes controller manager metrics.
          <ul><li>These metrics provide information about the state of each cluster.</li></ul>
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include Kubernetes API Server metrics</strong>
        </td>
        <td>
          Enable to send Kubernetes API Server metrics.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include Kubernetes Scheduler metrics</strong>
        </td>
        <td>
          Enable to send Kubernetes Scheduler metrics.
          For more information, see <a href="#k8s-schedule">Configure Include Kubernetes Scheduler Metrics</a>.
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include kubelet metrics</strong>
        </td>
        <td>
          Enable to send kubelet metrics for all workloads running in all your Kubernetes clusters.
          <ul><li>If you enable <strong>Include kubelet metrics</strong>, be prepared for a high volume of metrics.</li></ul></p>
        </td>
      </tr>
      <tr>
        <td>
          <strong>Include telegraf metrics when telegraf enabled</strong>
        </td>
        <td>
          Enable to send telegraf process memory status, agent metrics, and write metrics. 
          For more information, 
          see <a href="https://github.com/influxdata/telegraf/tree/v1.20.3/plugins/inputs/internal">Telegraf Internal Input Plugin</a> 
          in the telegraf GitHub repository.
        </td>
      </tr>
    </table>

    <p class="note"><strong>Note:</strong>
      The telegraf output configuration options are visible to <%= vars.k8s_runtime_abbr %> admins only.
    </p>
    
    Components you enable in this step will be visible to <%= vars.k8s_runtime_abbr %> admins only.

1. In **Setup Telegraf Outputs**, replace the default value `[[outputs.discard]]` with the contents of the configuration file
that you created in [Create a Configuration File](#toml) above.
See the following example for an HTTP output plugin:

    ```
    [[outputs.http]]
       url="https://example.com"
       method="POST"
       data_format="json"
    [[processors.override]]
      [processors.override.tags]
        director = "bosh-director-1"
    ```
<% if vars.product_version == "COMMENTED"  %>
    <p class="note"><strong>Note:</strong>
      If you use the Prometheus Output plugin, your Prometheus Client must be configured with <code>metric_version=2</code>. 
      For Telegraf Prometheus Output plugin configuration information, see 
      <a href="https://github.com/influxdata/telegraf/tree/release-1.20/plugins/outputs/prometheus_client#configuration">Configuration</a> 
      in the Telegraf GitHub repository.
    </p>
<% end %>
    
1. In **Setup Telegraf Agent**, replace the default Telegraf agent property values 
with your custom values for interval, buffering and debugging related properties. 
For more information about the configurable Telegraf agent properties, 
see [Agent configuration](https://docs.influxdata.com/telegraf/v1.15/administration/configuration/#agent-configuration) 
in the Telegraf documentation.
1. Click **Save**.

1. To deploy the <%= vars.product_tile %> tile, return to the Ops Manager
Installation Dashboard and click **Review Pending Changes** >
**Apply Changes**.

<% if vars.product_version == "COMMENTED"  %>
<br>
### <a id="telegraf-config"></a> (Optional) Customize telegraf Configuration

telegraf can optionally send Kubernetes Scheduler Metrics and telegraf agent status and metrics to telegraf output.  

To include Kubernetes Scheduler or telegraf agent metrics in your telegraf output, see:  

* [Configure Include Kubernetes Scheduler Metrics](#k8s-schedule)  
* [Configure Include telegraf Metrics](#include-telegraf)  


<br>
#### <a id="k8s-schedule"></a> (Optional) Configure Include Kubernetes Scheduler Metrics 

telegraf can optionally send Kubernetes Scheduler Metrics to telegraf output. 
The format of Kubernetes Scheduler Metrics output depends on the selected `Prometheus input plugin Metric version`.  

To configure telegraf to output Kubernetes Scheduler Metrics:  

1. Select **Include Kubernetes Scheduler metrics**.  

1. To modify the telegraf Kubernetes Scheduler Metrics output format, select the **Prometheus Input Plugin Metric Version**:  

    * `Prometheus input plugin Metric version = 1`  
    * `Prometheus input plugin Metric version = 2` 
    

    The following are the metrics keys included in Kubernetes Scheduler Metrics output:

    <table class="nice">
      <tr>
        <th>Position</th>
        <th>Metric&nbsp;Version&nbsp;1</th>
        <th>Metric&nbsp;Version&nbsp;2</th>
      </tr>
      <tr>
        <td>1</td>
        <td>rest_client_requests_total</td>
        <td>prometheus</td>
      </tr>
      <tr>
        <td>2</td>
        <td>cluster_name</td>
        <td>cluster_name</td>
      </tr>
      <tr>
        <td>3</td>
        <td>code</td>
        <td>code</td>
      </tr>
      <tr>
        <td>4</td>
        <td>host</td>
        <td>host</td>
      </tr>
      <tr>
        <td>5</td>
        <td>internal_ip</td>
        <td>internal_ip</td>
      </tr>
      <tr>
        <td>6</td>
        <td>method</td>
        <td>method</td>
      </tr>
      <tr>
        <td>7</td>
        <td>url</td>
        <td>url</td>
      </tr>
      <tr>
        <td>8</td>
        <td>counter</td>
        <td>rest_client_requests_total</td>
      </tr>
    </table>


    The following are examples of Kubernetes Scheduler Metrics output:

    <table class="nice">
      <tr>
        <th>Metric&nbsp;Version</th>
        <th>Example&nbsp;Output</th>
      </tr>
      <tr>
        <td>Metric&nbsp;Version&nbsp;1</td>
        <td>
          <code>rest_client_requests_total,cluster_name=aaa,code=200,host=master.cfcr.internal:8443,internal_ip=30.0.0.9,  
            method=GET,url=https://localhost:10259/metrics counter=313910 1660534610000000000</code>
        </td>
      </tr>
      <tr>
        <td>Metric&nbsp;Version&nbsp;2</td>
        <td>
          <code>prometheus,cluster_name=aaa,code=200,host=master.cfcr.internal:8443,internal_ip=30.0.0.9,method=GET,  
            url=https://localhost:10259/metrics rest_client_requests_total=314705 1660536100000000000</code>
        </td>
      </tr>
    </table>


<br>
#### <a id="include-telegraf"></a> (Optional) Configure Include telegraf Metrics

telegraf can optionally send statuses and metrics, for telegraf agent memory, agent, and write processes, to telegraf output.  

To include telegraf agent process metrics in telegraf output:  

1. Select the **Include telegraf metrics when telegraf enabled** option.  

    The following are the metrics and keys included in telegraf process metrics:

    <table class="nice">
      <tr>
        <th>Position</th>
        <th>Memory&nbsp;Metrics</th>
        <th>Agent&nbsp;Metrics</th>
        <th>Write&nbsp;Metrics</th>
        <th>Scheduler&nbsp;Metrics</th>
        <th>API&nbsp;Server&nbsp;Metrics</th>
        <th>Internal&nbsp;Metrics</th>
      </tr>
      <tr>
        <td>1</td>
        <td>internal_memstats</td>
        <td>internal_agent</td>
        <td>internal_write</td>
        <td>internal_gather</td>
        <td>internal_gather</td>
        <td>internal_gather</td>
      </tr>
      <tr>
        <td>2</td>
        <td>cluster_name</td>
        <td>cluster_name</td>
        <td>cluster_name</td>
        <td>alias=scheduler</td>
        <td>alias=api-server</td>
        <td>cluster_name</td>
      </tr>
      <tr>
        <td>3</td>
        <td>host</td>
        <td>go_version</td>
        <td>host</td>
        <td>cluster_name</td>
        <td>cluster_name</td>
        <td>host</td>
      </tr>
      <tr>
        <td>4</td>
        <td>internal_ip</td>
        <td>host</td>
        <td>internal_ip</td>
        <td>host</td>
        <td>host</td>
        <td>input</td>
      </tr>
      <tr>
        <td>5</td>
        <td>frees</td>
        <td>internal_ip</td>
        <td>output</td>
        <td>input</td>
        <td>input</td>
        <td>internal_ip</td>
      </tr>
      <tr>
        <td>6</td>
        <td>heap_alloc_bytes</td>
        <td>version</td>
        <td>version</td>
        <td>internal_ip</td>
        <td>internal_ip</td>
        <td>version</td>
      </tr>
      <tr>
        <td>7</td>
        <td>heap_sys_bytes</td>
        <td>metrics_written</td>
        <td>metrics_written</td>
        <td>version</td>
        <td>version</td>
        <td>metrics_gathered</td>
      </tr>
      <tr>
        <td>8</td>
        <td>alloc_bytes</td>
        <td>metrics_dropped</td>
        <td>metrics_dropped</td>
        <td>errors</td>
        <td>errors</td>
        <td>gather_time_ns</td>
      </tr>
      <tr>
        <td>9</td>
        <td>mallocs</td>
        <td>metrics_gathered</td>
        <td>buffer_size</td>
        <td>metrics_gathered</td>
        <td>metrics_gathered</td>
        <td>errors</td>
      </tr>
      <tr>
        <td>10</td>
        <td>heap_in_use_bytes</td>
        <td>gather_errors</td>
        <td>buffer_limit</td>
        <td>gather_time_ns</td>
        <td>gather_time_ns</td>
        <td></td>
      </tr>
      <tr>
        <td>11</td>
        <td>heap_released_bytes</td>
        <td></td>
        <td>metrics_filtered</td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td>12</td>
        <td>heap_objects</td>
        <td></td>
        <td>write_time_ns</td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td>13</td>
        <td>total_alloc_bytes</td>
        <td></td>
        <td>errors</td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td>14</td>
        <td>pointer_lookups</td>
        <td></td>
        <td>metrics_added</td>
        <td></td>
        <td></td>
        <td></td>
      </tr>
    </table>


    The following are examples of telegraf agent process status and metrics output:

    <table class="nice">
      <tr>
        <th>Metric&nbsp;Type</th>
        <th>Example&nbsp;Output</th>
      </tr>
      <tr>
        <td>Memory</td>
        <td>
          <code>internal_memstats,cluster_name=aaa,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,internal_ip=30.0.0.9 frees=464168i,  
            heap_alloc_bytes=20156736i,heap_sys_bytes=28868608i,alloc_bytes=20156736i,sys_bytes=37897224i,mallocs=615347i,  
            heap_idle_bytes=7274496i,heap_in_use_bytes=21594112i,heap_released_bytes=2621440i,heap_objects=151179i,num_gc=7i,
            total_alloc_bytes=50755200i,pointer_lookups=0i 1660534850000000000</code>
        </td>
      </tr>
      <tr>
        <td>Agent</td>
        <td>
          <code>internal_agent,cluster_name=aaa,go_version=1.17,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,internal_ip=30.0.0.9,  
            version=1.20.2 metrics_written=3408i,metrics_dropped=0i,metrics_gathered=3551i,gather_errors=0i 1660534850000000000</code>
        </td>
      </tr>
      <tr>
        <td>Write</td>
        <td>
          <code>internal_write,cluster_name=aaa,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,internal_ip=30.0.0.9,output=file,  
            version=1.20.2 metrics_written=3408i,metrics_dropped=0i,buffer_size=142i,buffer_limit=200000i,metrics_filtered=0i,
            write_time_ns=685575i,errors=0i,metrics_added=3550i 1660534850000000000</code>
        </td>
      </tr>
      <tr>
        <td>Scheduler</td>
        <td>
          <code>internal_gather,alias=scheduler,cluster_name=aaa,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,input=prometheus,  
          internal_ip=30.0.0.9,version=1.20.2 errors=0i,metrics_gathered=3425i,gather_time_ns=18387320i 1660534850000000000</code>
        </td>
      </tr>
      <tr>
        <td>API Server</td>
        <td>
          <code>internal_gather,alias=api-server,cluster_name=aaa,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,input=prometheus,  
            internal_ip=30.0.0.9,version=1.20.2 errors=0i,metrics_gathered=2747i,gather_time_ns=140194058i 1660546440000000000</code>
        </td>
      </tr>
      <tr>
        <td>Internal</td>
        <td>
          <code>internal_gather,cluster_name=aaa,host=859bffa0-eeab-4f81-b664-53ca5a9fb756,input=internal,internal_ip=30.0.0.9,
            version=1.20.2 metrics_gathered=126i,gather_time_ns=1265947i,errors=0i 1660534850000000000</code>
        </td>
      </tr>
    </table>

<% end %>

<br>
## <a id="errors"></a>Troubleshoot etcd

<%= vars.recommended_by %> recommends working with Support to troubleshoot
control plane/etcd node VMs.
The monitoring and metrics data you retrieve from the control plane/etcd node VMs
can help the Support team diagnose and troubleshoot errors.
