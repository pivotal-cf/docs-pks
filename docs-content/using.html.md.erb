---
title: Using PKS
owner: PKS
---

<p class="note"><strong>Note</strong>: The PKS documentation is still under development. This topic will continue to be updated and expanded to reflect the most current information.</p>

This topic describes how to use Pivotal Container Service (PKS).

After an operator has [installed](installing.html) PKS, developers can use `curl` to do the following:

* [Create](#create-cluster) a Kubernetes cluster
* [Update](#update-cluster) the name of a Kubernetes cluster
* [View](#view-cluster) the list of running Kubernetes clusters
* [Delete](#delete-cluster) a Kubernetes cluster

<p class="note"><strong>Note</strong>: The PKS CLI is still under development. Until then, use the <code>curl</code> commands documented in this topic to create and manage Kubernetes clusters.</p>

To deploy application workloads to a Kubernetes cluster, developers use `kubectl`, the Kubernetes CLI. For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/user-guide/kubectl-overview/).

##<a id='prereqs'></a> Prerequisites

To perform the procedures in this topic, you must have a Pivotal Cloud Foundry (PCF) deployment with Ops Manager and PKS installed, but not Pivotal Application Service (PAS). This procedure only works if PAS is not installed.

##<a id='create-cluster'></a> Create Cluster

To create a cluster, perform the following steps:

1. Choose a unique name for your cluster and set it as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Retrieve the IP address of your Kubernetes master host and set it as an environment variable named `KUBERNETES_SERVICE_HOST`. For example:
  <pre class="terminal">$ export KUBERNETES\_SERVICE\_HOST="192.0.2.0"</pre>

1. Retrieve the IP addresses of your Kubernetes worker nodes and set them as an environment variable named `WORKLOAD_ADDRESS`. For example:
  <pre class="terminal">$ export WORKLOAD\_ADDRESS="192.0.2.1,192.0.2.2,192.0.2.3"</pre>

1. Choose either attribute-based access control (ABAC) or role-based access control (RBAC) for your authorization mode. Set an environment variable named `AUTHORIZATION_MODE` to `abac` or `rbac`. For example:
  <pre class="terminal">$ export AUTHORIZATION\_MODE="abac"</pre>
  For more information about authorization modes, see the [Kubernetes documentation](https://kubernetes.io/docs/admin/authorization/#authorization-modules).

1. Retrieve your PKS API endpoint and set it as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Create a cluster with the following command:
  <pre class="terminal">$ curl -k -s -X POST \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  -d '{"name": "$CLUSTER\_NAME","parameters": \
  {"kubernetes\_master\_host": \
  "$KUBERNETES\_SERVICE\_HOST","worker_haproxy\_ip\_addresses": \
  "$WORKLOAD\_ADDRESS:-", "authorization\_mode": \
  "$AUTHORIZATION\_MODE" },"plan\_id": ""}' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/</pre>

2. Bind a user to the newly created cluster with the following command and export the output as an environment variable named `CREDENTIALS`:
  <pre class="terminal">$ export CREDENTIALS="$(curl -k -s -X POST \
  --header 'Content-Type: application/json' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/binds)"
  </pre>

    If the command completes successfully, it returns a JSON response with the cluster credentials and the cluster configuration, known as the kubeconfig. The response resembles the following:
    <pre class="terminal">
    {
      "credentials": {
        "kubeconfig": {
          "apiVersion": "v1",
          "clusters": [
            {
              "cluster": {
                "certificate-authority-data": "some\_data",
                "server": "http<span>s:/</span>/server"
              },
              "name": "kubo-cluster"
            }
          ],
          "contexts": [
            {
              "context": {
                "cluster": "kubo-cluster",
                "user": "some\_user"
              },
              "name": "kubo-cluster"
            }
          ],
          "current-context": "kubo-cluster",
          "kind": "Config",
          "preferences": {},
          "users": [
            {
              "name": "some\_name",
              "user": {
                "token": "some\_token"
              }
            }
          ]
        }
      }
    }
    </pre>
4. Use the [BOSH CLI v2](https://bosh.io/docs/cli-v2.html) to convert the JSON output to a YAML file at `$HOME/.kube/config`:
  <pre class="terminal">$ bosh2 int <(echo "${CREDENTIALS}") --path="/credentials/kubeconfig" > "${HOME}/.kube/config"</pre>

You can use the credentials and the kubeconfig to deploy application workloads to your cluster with `kubectl`. For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/user-guide/kubectl-overview/).

##<a id='update-cluster'></a> Update Cluster Name

<p class="note"><strong>Note</strong>: This section is still under development.</p>

##<a id='view-cluster'></a> View Cluster List

To view information about the deployed clusters, perform the following steps:

1. Retrieve your PKS API endpoint and set it as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. View information about the deployed clusters with the following command:
  <pre class="terminal">$ curl -k -s -X GET \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json;charset=UTF-8'\
    https://$PKS_API_ENDPOINT:9021/v1/clusters</pre>
  The response lists details about the deployed clusters, including  cluster name and status.

##<a id='delete-cluster'></a> Delete Cluster

To delete a cluster, perform the following steps:

1. Retrieve your PKS API endpoint and set it as an environment variable named `PKS_API_ENDPOINT`. For example:
  <pre class="terminal">$ export PKS\_API\_ENDPOINT="pks.example.com"</pre>

1. Set the name of the cluster you want to delete as an environment variable named `CLUSTER_NAME`. For example:
  <pre class="terminal">$ export CLUSTER\_NAME="my-cluster"</pre>

1. Delete the cluster with the following command:
  <pre class="terminal">$ curl -k -s -X DELETE \
  --header 'Content-Type: application/json' \
  --header 'Accept: application/json;charset=UTF-8' \
  https://$PKS\_API\_ENDPOINT:9021/v1/clusters/$CLUSTER\_NAME/</pre>
