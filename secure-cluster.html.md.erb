---
title: Securing Clusters and Workloads
owner: PKS
---

This topic describes how to Kubernetes clusters created with 
<%= vars.product_full %> (<%= vars.k8s_runtime_abbr %>).

<%#
## <a id='logging-prerequisites'></a> Prerequisites

Before starting the tasks in this topic:  

* XX
#%>

## <a id='overview'></a> Overview

You can block access to external resources from a Pod using a Kubernetes Network Policy. 
You can use a Kubernetes Network Policy to block access from all cluster namespaces or specific namespaces.
You can also use a Network Policy to grant access to external resources 
from specific cluster namespaces.  

For Pods on <%= vars.k8s_runtime_abbr %> clusters deployed on AWS, 
you can also use a Kubernetes Network Policy to block access to the AWS metadata service for VMs. 
For information on why you should secure access to external resources 
from Pods on <%= vars.k8s_runtime_abbr %> clusters deployed on AWS, see 
[Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) 
in the AWS documentation.  


## <a id='secure-namespaces'></a> Secure Access for All Namespaces

You can use Kubernetes Network Policies to grant access to external resources from a specific Cluster namespace and
and deny access from all other Cluster namespaces:

* [Deny Access to All Namespaces](#deny-namespace-access)
* [Grant Access to a Specific Namespace](#grant-namespace-access)

### <a id='deny-namespace-access'></a> Deny Access to All Namespaces

To use a Kubernetes Network Policy to deny Pod access from all cluster namespaces: 

1. To create a `deny` Network Policy:
    1. Create a YAML configuration file named `np.yml`.
    1. Populate the YAML file with the following `deny` Network Policy configuration:  

        ```
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: POLICY-NAME
        spec:
          podSelector: {}
          policyTypes:
          - Egress
          egress:
          - to:
            - ipBlock:
                cidr: 0.0.0.0/0
                except:
                - IP-ADDRESS
        ```
        Where:  
        * `POLICY-NAME` is the name for this Network Policy. For example `deny-metadata-access`.  
        * `IP-ADDRESS` is the IP Address to manage. For example `169.254.169.254/32`.  
1. To apply the `deny` Network Policy to your cluster:  

    ```
    kubectl apply -f np.yml
    ```

    For example:  

    <pre class="terminal">
    # kubectl apply -f np.yml
    networkpolicy.networking.k8s.io/deny-metadata-access created  
    </pre>
1. Verify all namespaces in your Pod are blocked from accessing external resources.  

### <a id='grant-namespace-access'></a> Grant Access to a Specific Namespace

To configure a Kubernetes Network Policy to allow resource access from a specific Pod namespace:

1. To create an `allow` Network Policy for a single namespace in the cluster:
    1. Create a YAML configuration file named `np-allow.yml`.
    1. Populate the YAML file with the following `allow`  Network Policy configuration:  

        ```
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: POLICY-NAME
        spec:
          podSelector:
            matchLabels:
              app: NAMESPACE
          policyTypes:
          - Egress
          egress:
          - to:
            - ipBlock:
                cidr: IP-ADDRESS        
        ```
        Where:
        * `POLICY-NAME` is the name for this Network Policy. For example `allow-metadata-access`.  
        * `NAMESPACE` is the namespace to grant access to. 
        Only the Pods tagged with the `app: NAMESPACE` label are affected by this configuration.  
        * `IP-ADDRESS` is the IP Address to manage. For example `169.254.169.254/32`.  
1. To apply the `allow` Network Policy to your cluster:  

    ```
    kubectl apply -f np-allow.yml
    ```

    For example:  

    <pre class="terminal">
    # kubectl apply -f np-allow.yml
    networkpolicy.networking.k8s.io/allow-metadata-access created
    master/f8450b68-786a-492e-a8af-07baafb450a2:~# kubectl get networkpolicy
    NAME                    POD-SELECTOR   AGE
    allow-metadata-access   app=nginx      3s
    deny-metadata-access    <none>         8s
    </pre>
1. Verify that only the cluster namespace(s) you have designated have access to external resources.  



## <a id='secure-namespace-antrea'></a> Secure Access for All Namespaces Using an Antrea Cluster-Wide Network Policy

You can use an Antrea cluster-wide Kubernetes Network Policy to manage Pod access to resources:  

* [Deny Access to All Namespaces Using Antrea](#deny-namespace-access-antrea)  
* [Allow Access to a Namespace Using Antrea](#allow-namespace-access-antrea)  

For more information on the benefits of using an Antrea Network Policy configuration, see 
[Antrea Network Policy CRDs](https://github.com/antrea-io/antrea/blob/main/docs/antrea-network-policy.md) 
in the Antrea GitHub repository.

### <a id='deny-namespace-access-antrea'></a> Deny Access to All Namespaces Using Antrea

You can use an Antrea cluster-wide Kubernetes Network Policy to deny Pod access to resources.

1. To create a `deny` Network Policy:
    1. Create a YAML configuration file named `np-cluster-deny.yml`.
    1. Populate the YAML file with the following `deny` Network Policy configuration:  

        ```
        apiVersion: crd.antrea.io/v1alpha1
        kind: ClusterNetworkPolicy
        metadata:
          name: POLICY-NAME
        spec:
          priority: 3          ##### ====> deny access should have lower priority than allow access , or use 'tier' to determine what is taking effect first
          appliedTo:
           - podSelector: {}
          egress:
           - action: Drop
             to:
             - ipBlock:
                cidr: IP-ADDRESS
        ```
        Where:  
        * `POLICY-NAME` is the name for this Network Policy. For example `deny-metadata-access`.  
        * `IP-ADDRESS` is the IP Address to manage. For example `169.254.169.254/32`.  
1. To apply the `deny` Network Policy to your cluster:  

    ```
    kubectl apply -f np-cluster-deny.yml
    ```

    For example:  

    <pre class="terminal">
    # kubectl apply -f np-cluster-deny.yml
    clusternetworkpolicy.crd.antrea.io/deny-metadata-access created 
    </pre>
1. Verify the Network Policies have been applied:  

    ```
    kubectl get clusternetworkpolicies.crd.antrea.io -owide
    ```

    For example:  

    <pre class="terminal">
    # kubectl get clusternetworkpolicies.crd.antrea.io -owide
    NAME                    TIER          PRIORITY   DESIRED NODES   CURRENT NODES   AGE
    deny-metadata-access    application   3          3               3               37s
    </pre>
1. Verify all namespaces in your Pod are blocked from accessing external resources.  

### <a id='allow-namespace-access-antrea'></a> Allow Access to a Namespace Using Antrea

To configure an Antrea Kubernetes Network Policy to allow resource access from a specific Pod namespace:

1. To create an `allow` Network Policy for a single namespace in the cluster:
    1. Create a YAML configuration file named `np-cluster-allow.yml`.
    1. Populate the YAML file with the following `allow` Network Policy configuration:  

        ```
        apiVersion: crd.antrea.io/v1alpha1
        kind: ClusterNetworkPolicy
        metadata:
          name: POLICY-NAME
        spec:
          priority: 2
          appliedTo:
            - podSelector:
                matchLabels:
                  app: NAMESPACE
          egress:
           - action: Allow
             to:
               - ipBlock:
                   cidr: IP-ADDRESS       
        ```
        Where:  
        * `POLICY-NAME` is the name for this Network Policy. For example `allow-metadata-access`.  
        * `NAMESPACE` is the namespace to grant resource access to. 
        Only the Pods tagged with the `app: NAMESPACE` label are affected by this configuration.  
        * `IP-ADDRESS` is the IP Address to manage. For example `169.254.169.254/32`.  
1. To apply the `allow` Network Policy to your cluster:  

    ```
    kubectl apply -f np-allow.yml
    ```

    For example:  

    <pre class="terminal">
    # kubectl apply -f np-cluster-allow.yml
    clusternetworkpolicy.crd.antrea.io/allow-metadata-access created
    </pre>
1. Verify the Network Policies have been applied:  

    ```
    kubectl get clusternetworkpolicies.crd.antrea.io -owide
    ```

    For example:  

    <pre class="terminal">
    # kubectl get clusternetworkpolicies.crd.antrea.io -owide
    NAME                    TIER          PRIORITY   DESIRED NODES   CURRENT NODES   AGE
    allow-metadata-access   application   2          1               1               33s
    </pre>
1. Verify that only the cluster namespace(s) you have designated have access to external resources.  
