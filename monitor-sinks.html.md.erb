---
title: Monitoring Clusters with Log Sinks
owner: TKGI
---

This topic describes the log sink resources you can use
to monitor Kubernetes clusters provisioned by <%= vars.product_full %>
and their workloads.

## <a id='overview'></a>Overview

You can use the following sink resources to collect logs from your
Kubernetes clusters.

<table>
  <tr>
    <th width="25%">Sink Resource</th>
    <th width="20%">Sink Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>ClusterLogSink</code></td>
    <td>Log sink</td>
    <td><p>Forwards logs from a cluster to a log destination. Logs are transported using one of the following:</p>
        <ul>
          <li>The Syslog Protocol defined in <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a></li>
          <li>WebHook</li>
          <li>Fluent Bit output plugins</li>
        </ul>
    </td>
  </tr>
  <tr>
    <td><code>LogSink</code></td>
    <td>Log sink</td>
    <td><p>Forwards logs from a namespace within a cluster to a log destination. Logs are transported using one of the following:</p>
        <ul>
          <li>The Syslog Protocol defined in <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a></li>
          <li>WebHook</li>
          <li>Fluent Bit output plugins</li>
        </ul>
    </td>
  </tr>
</table>

## <a id='logs'></a>Log Sinks

`ClusterLogSink` and `LogSink` resources collect pod logs and events from the Kubernetes API
in your Kubernetes clusters.
For more information, see:

* [Log Format](#log-format)
* [Notable Kubernetes API Events](#important-events)

### <a id='log-format'></a>Log Format

In <%= vars.product_short %>,
you can create `ClusterLogSink` and `LogSink` resources of the following types:</p>

* Syslog
* WebHook
* Fluent Bit output plugins

Your log format depends on the type of `ClusterLogSink` or `LogSink` you want to use.
For example, if you use a `ClusterLogSink` or `LogSink` resource of type `syslog`,
<%= vars.product_short %> formats your logs as described in the sections below.

#### <a id='syslog'></a>Syslog Format

All log entries collected by `ClusterLogSink` and `LogSink` resources of type `syslog`
include a prefix in the following format:

```
APP-NAME/NAMESPACE/POD-ID
```

Where:

  * `APP-NAME` is `pod.log` or `k8s.event`.
  * `NAMESPACE` is the namespace associated with the pod log or Kubernetes event.
  * `POD-ID` is the ID of the pod associated with the pod log or Kubernetes event.

#### <a id="pod-logs"></a>Pod Logs

Pod logs are distinguished by the string `pod.log` in the `APP-NAME` field.

The following is a sample pod log entry:

```
36 <14>1 2018-11-26T18:51:41.647825+00:00 cluster-name
pod.log/rocky-raccoon/logspewer-6b58b6689d-dhddj - - [kubernetes@47450 
app="logspewer" pod-template-hash="2614622458" namespace_name="rocky-raccoon" 
object_name="logspewer-6b58b6689d-dhddj" container_name="logspewer"] 
2018/11/26 18:51:41 Log Message 589910
```

Where:

  * `cluster-name` is the human-readable cluster name used when creating the cluster.
  * `pod.log` is the `APP-NAME`.
  * `rocky-raccoon` is the `NAMESPACE`.
  * `logspewer-6b58b6689d-dhddj` is the `POD-ID`.

#### <a id="k8s-api"></a>Kubernetes API Events

Kubernetes API events are distinguished by the string `k8s.event` in the `APP-NAME` field.

The following is an example Kubernetes API event log entry:

```
Nov 14 16:01:49 cluster-name
k8s.event/rocky-raccoon/logspewer-6b58b6689d-j9n: 
Successfully assigned rocky-raccoon/logspewer-6b58b6689d-j9nq7 
to vm-38dfd896-bb21-43e4-67b0-9d2f339adaf1
```

Where:

  * `cluster-name` is the human-readable cluster name used when creating the cluster.
  * `k8s.event` is the `APP-NAME`.
  * `rocky-raccoon` is the `NAMESPACE`.
  * `logspewer-6b58b6689d-j9n` is the `POD-ID`.

### <a id="important-events"></a>Notable Kubernetes API Events

The following section lists Kubernetes API events that can help assess Kubernetes scheduling problems in <%= vars.product_short %>.

To monitor for these events, look for log entries that contain the <strong>Identifying String</strong> indicated below for each event.

#### <a id="imagepullbackoff"></a>Failure to Retrieve Containers from Registry

<table>
   <tr><th colspan="2" style="text-align: center;"><br>ImagePullBackOff<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Image pull back offs occur when the Kubernetes API cannot reach a registry to retrieve a container or the container does not exist in the registry. The scheduler might be trying to access a registry that is not available on the network. For example, Docker Hub is blocked by a firewall. Other reasons might include the registry is experiencing an outage or a specified container has been deleted or was never uploaded.</td>
   </tr>
   <tr>
      <th>Identifying String</th>
      <td><code>Error:ErrImagePull</code></td>
   </tr>
   <tr>
      <th>Example Sink Log Entry</th>
      <td>
      <code>Jan 25 10:18:58 gke-bf-test-default-pool-aa8027bc-rnf6 k8s.event/default/test-669d4d66b9-zd9h4/:  Error: ErrImagePull</code>
      </td>
   </tr>
</table>

#### <a id="crashloopbackoff"></a>Malfunctioning Containers

<table>
   <tr><th colspan="2" style="text-align: center;"><br>CrashLoopBackOff<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Crash loop back offs imply that the container is not functioning as intended. There are several potential causes of crash loop back offs, which depend on the related workload. To investigate further, examine the logs for that workload.</td>
   </tr>
   <tr>
      <th>Identifying String</th>
      <td><code>Back-off restarting failed container</code></td>
   </tr>
   <tr>
      <th>Example Sink Log Entry</th>
      <td>
      <code>Jan 25 09:26:44 cluster-name k8s.event/monitoring/cost-analyzer-prometheus-se: Back-off restarting failed container</code>
      </td>
   </tr>
</table>

#### <a id="containercreated"></a>Successful Scheduling of Containers

<table>
   <tr><th colspan="2" style="text-align: center;"><br>ContainerCreated<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Operators can monitor the creation and successful start of containers to keep track of platform usage at a high level. Cluster users can track this event to monitor the usage of their cluster.</td>
   </tr>
   <tr>
      <th>Identifying String</th>
      <td><code>Started container</code></td>
   </tr>
   <tr>
      <th>Example Sink Log Entries</th>
      <td>
      <code>
        Jan 25 09:14:55 cluster-name 35.239.18.250 k8s.event/rocky-raccoon/logspewer-6b58b6689d/: Created pod: logspewer-6b58b6689d-sr96t <br/>
        Jan 25 09:14:55 cluster-name 35.239.18.250 k8s.event/rocky-raccoon/logspewer-6b58b6689d-sr9: Successfully assigned rocky-raccoon/ logspewer-6b58b6689d-sr96t to vm-efe48928-be8e-4db5-772c-426ee7aa52f2 <br/>
        Jan 25 09:14:55 cluster-name k8s.event/rocky-raccoon/logspewer-6b58b6689d-mkd: Killing container with id docker://logspewer:Need to kill Pod <br/>
        Jan 25 09:14:56 cluster-name  k8s.event/rocky-raccoon/logspewer-6b58b6689d-sr9: Container image "oratos/logspewer:v0.1" already present on machine <br/>
        Jan 25 09:14:56 cluster-name  k8s.event/rocky-raccoon/logspewer-6b58b6689d-sr9: Created container <br/>
        Jan 25 09:14:56 cluster-name  k8s.event/rocky-raccoon/logspewer-6b58b6689d-sr9: Started container <br/>
      </code>
      </td>
   </tr>
</table>

#### <a id="failedscheduling"></a>Failure to Schedule Containers

<table>
   <tr><th colspan="2" style="text-align: center;"><br>FailedScheduling<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>This event occurs when a container cannot be scheduled. For instance, this might occur due to lack of node resources.</td>
   </tr>
   <tr>
      <th>Identifying String</th>
      <td><code>Insufficient RESOURCE</code><br>where <code>RESOURCE</code> is a specific type of resource. For example, <code>cpu</code>.</td>
   </tr>
   <tr>
      <th>Example Sink Log Entries</th>
      <td>
      <code>
       Jan 25 10:51:48 gke-bf-test-default-pool-aa8027bc-rnf6 k8s.event/default/test2-5c87bf4b65-7fdtd/: 0/1 nodes are available: 1 Insufficient cpu.
      </code>
      </td>
   </tr>
</table>

## <a id="related-links"></a>Related Links

For more information about log sinks, see:

* [Creating and Managing Sink Resources](./create-sinks.html).

    Follow these instructions to create `ClusterLogSink` and `LogSink` resources,
    described in [Overview](#overview) above.
* [Sink Architecture in <%= vars.product_short %>](./sink-architecture.html).

    See this topic for conceptual information about sinks.

