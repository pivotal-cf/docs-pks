---
title: Configure NCP Logging
owner: TKGI
lbtype: ncplogging
---

This topic describes how to define network profiles for logging NCP configurations.

## <a id='log-about'></a> About Logging for NCP Configurations

<%= vars.product_full %> provides network profile parameters for logging `ncp.ini` configurations.

## <a id='log-params'></a> Parameters for NCP Logging

The parameter `cni_configurations` is a map with two keys: `type` and `parameters`. The following table shows the parameters for configuring NCP:

<%= partial 'ic-network-profile' %> 


## <a id='log-example'></a> Example Network Profile for NCP Logging

The following network profile is an example that illustrates the parameters exposed for NCP logging. 

```
{
  "name": "ncp_network_profile",
  "description": "Example network profile for NCP logging and error handling",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {           
             "log_level": "WARNING",
             "log_dropped_traffic": true 
         	}
       	}
   		}
   	}
}
```

## <a id='log_settings'></a> Log Settings

The parameter `log_settings` is a map that supports two keys: `log_level` and `log_dropped_traffic`.

## <a id='log_level'></a> Log Level

The `log_level` parameter type is a string. The `log_level` value is an enumeration that supports the following values: 

- "INFO"
- "WARNING"
- "DEBUG"
- "ERROR"
- "CRITICAL"

Any other value results in an error.

The value is set for three *ncp.ini* keys: `coe.nsxlib_loglevel`, `coe.loglevel`, and `k8s.loglevel`. The default log levels for these keys are as follows:

ncp.ini key 		   | Default log level
-----------------------|-------------------
`coe.nsxlib_loglevel`  | INFO
`coe.loglevel` 		   | NONE 		
`k8s.loglevel`		   | NONE


## <a id='log_dropped_traffic'></a> Log Dropped Traffic

The `log_dropped_traffic` type is a boolean: `true` or `false`. Any other type is rejected, such as "true". Missing entry is accepted. Enabling this parameter is used in distributed firewall configurations to log the traffic for dropped rules.

Example network profile for logging:

```
{
  "name": "example-network-profile",
  "description": "log_settings",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "log_settings": {
             "log_level": "DEBUG",
             "log_dropped_traffic": true        
           }
         }
     }
  }
}
```

## <a id='enable_err_crd'></a> enable_err_crd

The `enable_err_crd` parameter provides a mechanism of reporting NSX backend errors to Kubernetes cluster using a [custom resource definition (CRD)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions).

The Kubernetes resource "NSXError" is defined to hold error information. For each kubernetes resource object that has NSX backend failures, one "NSXError" object is generated with error information. There is a 'common error object' containing all cluster-wide errors.

The `enable_err_crd` data type is a boolean: `true` or `false`. Missing entry is accepted. If `enable_err_crd` is set to `true`, you define a CRD to handle the "NSXError" common error object.

Example: network profile for `enable_err_crd`:

```
{
  "name": "example_network_profile",
  "description": "enable_err_crd",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "enable_err_crd": true
         }
     }
  }
}
```