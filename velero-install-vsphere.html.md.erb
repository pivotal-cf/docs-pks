---
title: Installing Velero vSphere Plugin
owner: TKGI
---

This topic describes how to install Velero for backing up and restoring 
<%= vars.product_short %> (<%= vars.k8s_runtime_abbr %>)-provisioned Kubernetes workloads on vSphere.

##<a id="prereqs"></a> Prerequisites

Ensure the following before installing Velero for backing up and restoring <%= vars.k8s_runtime_abbr %> on vSphere:  

* Your clusters use the automatically installed vSphere CSI Driver. For more information, 
see [Deploying and Managing Cloud Native Storage (CNS) on vSphere](vsphere-cns.html).  
* **Allow Privileged** is enabled in the plan for the cluster being backed up. 
For more information, see [Plans](installing-vsphere.html#plans) in 
_Installing Tanzu Kubernetes Grid Integrated Edition on vSphere_.    
* You have read: [Tanzu Kubernetes Workload Backup and Restore Requirements](./backup-and-restore-work.html#requirements)
in _Backing Up and Restoring Tanzu Kubernetes Workloads Using Velero with Restic_.  
* You have a Linux VM with sufficient storage to store several workload backups.
You will install MinIO on this VM. For more information, see
[Quick start evaluation install with Minio](https://velero.io/docs/v1.8/contributions/minio/) in the Velero documentation.  
* You have a <%= vars.k8s_runtime_abbr %> Client VM (Linux) where CLI tools are installed, such as the <%= vars.k8s_runtime_abbr %> CLI, kubectl, and others.
You will install the Velero CLI on this client VM.
If you do not have such a VM, you can install the Velero CLI locally, but you must adjust the following installation steps accordingly.  
* The Kubernetes environment has internet access and can be reached by the client VM.
If the environment does not have internet access, refer to
[Install Velero in an Air-Gapped Environment](#velero-cluster-install-airgapped) below.  

##<a id="minio-deploy"></a> Deploy an Object Store

The Velero backup procedure requires an object store as the backup destination for workload backups. Deploy and configure a MinIO Server on a Linux Ubuntu VM as the Velero backend object store.
For more information, see [Deploy an Object Store](velero-install.html#deploy-an-object-store-1).

##<a id="velero-deploy"></a> Install the Velero CLI on Your Workstation

To install the Velero CLI on your workstation:  

1. [Download the Velero CLI Binary](#velero-download)  
1. [Install the Velero CLI](#velero-cli-install)  

### <a id='velero-download'></a> Download the Velero CLI Binary

To download the Velero CLI Binary:  

1. Download the supported version of the signed Velero binary for your version of <%= vars.k8s_runtime_abbr %> 
from the <%= vars.k8s_runtime_abbr %> product downloads page at myVMware. 
For more information about the currently supported Velero versions, 
see the _Product Snapshot_ section of the [Release Notes](release-notes.html).  

    <p class="note"><strong>Note</strong>: You must use the Velero binary signed by VMware to be eligible for support from VMware.</p>

### <a id='velero-cli-install'></a> Install the Velero CLI

To install the Velero CLI on the <%= vars.k8s_runtime_abbr %> client or on your local machine:  

1. Open a command line and change directory to the Velero CLI download.  
1. Unzip the download file:  

    ```
    gunzip velero-linux-v1.8.1_vmware.1.gz
    ```

1. Grant execute permissions to the Velero CLI:  

    ```
    chmod +x velero-linux-v1.8.1_vmware.1
    ```

1. Make the Velero CLI globally available by moving it to the system path:  

    ```
    cp velero-linux-v1.8.1_vmware.1 /usr/local/bin/velero
    ```

1. Verify the installation:  

    ```
    velero version
    ```
    For example:  

    <pre class="terminal">
    $ velero version<br><br>
    Client:<br>
        Version: v1.8.1
    </pre>

##<a id='velero-cluster-install'></a> Install Velero on the Target Kubernetes Cluster

To install the Velero pod on each Kubernetes cluster whose workloads you want to backup, complete the following:  

1. [Prerequisites](#velero-cluster-install-prereqs)  
1. [Set Up the kubectl Context](#velero-cluster-setup)
1. [Install Velero](#velero-cluster-install-procedure)
1. [Create a Velero vSphere Credential Secret](#velero-credentials-secret)
1. [Create the Velero vSphere Plugin Configuration File](#create-vsphere-plugin-config-file)  
1. [Install Velero vSphere Plugin](#velero-vsphere-plugin-install)
1. [Back up the VCP Volumes Migrated to vSphere CSI Driver](#velero-vcp-csi-migration)
1. [Adjust Velero Memory Limits If Necessary](#velero-memory)

###<a id='velero-cluster-install-prereqs'></a>Prerequisites

The following steps require that:  

* You have installed MinIO as your backup object store.
For more information, see [Deploy an Object Store](velero-install.html#deploy-an-object-store-1) above.  
* Your Kubernetes cluster has internet access.  

###<a id='velero-cluster-setup'></a>Set Up the kubectl Context

The Velero CLI context will automatically follow the kubectl context.
Before running Velero CLI commands to install Velero on the target cluster, set the kubectl context:  

1. Retrieve the name of the MinIO bucket. For example, `tkgi-velero`.  
1. Get the AccessKey and SecretKey for the MinIO bucket.
For example, AccessKey: `0XXNO8JCCGV41QZBV0RQ` and SecretKey: `clZ1bf8Ljkvkmq7fHucrKCkxV39BRbcycGeXQDfx`.  
1. Verify `kubectl` works against the cluster. If needed, use `tkgi get-credentials`.  
1. Set the context for the target Kubernetes cluster so that the Velero CLI knows which cluster to work:

    ```
    tkgi get-credentials CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the cluster.  
    
    For example:  

    <pre class="terminal">
    $ tkgi get-credentials cluster-1<br><br>
    Fetching credentials for cluster cluster-1.<br>
    Password: ********<br>
    Context set for cluster cluster-1.<br><br>
    You can now switch between clusters by using:<br>
    $kubectl config use-context &lt;cluster-name&gt;
    </pre>

    You can also run `kubectl config use-context CLUSTER-NAME` to set context.  

1. To create a secrets file, create a file named `credentials-minio`. 
Update the file with the MinIO server access credentials that you collected above:  

    ```
    [default]
    aws_access_key_id = ACCESS-KEY
    aws_secret_access_key = SECRET-KEY
    ```

    Where:  

    * `ACCESS-KEY` is the AccessKey that you collected above.  
    * `SECRET-KEY` is the SecretKey that you collected above.  

    For example:  

    ```
    [default]
    aws_access_key_id = 0XXNO8JCCGV41QZBV0RQ
    aws_secret_access_key = clZ1bf8Ljkvkmq7fHucrKCkxV39BRbcycGeXQDfx
    ```

1. Save the file.  

###<a id='velero-cluster-install-procedure'></a>Install Velero

1. Install Velero on the target Kubernetes cluster:  

    ```
    velero install \
    --image projects.registry.vmware.com/tkg/velero/velero:v1.8.1_vmware.1
    --provider aws --bucket tkgi-velero \
    --secret-file ./credentials-minio \
    --plugins "projects.registry.vmware.com/tkg/velero/velero-plugin-for-aws:v1.4.1_vmware.1" \
    --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://IP-ADDRESS:PORT,publicUrl=http://IP-ADDRESS:PORT \
    --snapshot-location-config region=minio
    ```
    Where:
    
    * `IP-ADDRESS` is the IP address that is used to connect to the MinIO server.
    * `PORT` is the number of the port that is used to connect to the MinIO server.

    For example:  

    <pre class="terminal">
    $ velero install --image projects.registry.vmware.com/tkg/velero/velero:v1.8.1_vmware.1 --provider aws --bucket tkgi-velero --secret-file ./credentials-minio --plugins "projects.registry.vmware.com/tkg/velero/velero-plugin-for-aws:v1.4.1_vmware.1" --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://20.20.233.44:9000,publicUrl=http://20.20.233.44:9000 --snapshot-location-config region=minio<br>
    CustomResourceDefinition/backups.velero.io: created<br>
    ...<br>
    Waiting for resources to be ready in cluster...<br>
    ...<br>
    Velero is installed! Use 'kubectl logs deployment/velero -n velero' to view the status.
    </pre>

    <p class="note"><strong>Note</strong>: You must include the <code>--snapshot-location-config</code> region configuration parameter.</p>

1. Verify the installation of Velero:  

    ```
    kubectl logs deployment/velero -n velero
    ```

1. Verify the `velero` namespace:  

    ```
    kubectl get ns
    ```

    For example:  
    
    <pre class="terminal">
    $ kubectl get ns<br><br>
    NAME              STATUS   AGE<br>
    default           Active   13d<br>
    kube-node-lease   Active   13d<br>
    kube-public       Active   13d<br>
    kube-system       Active   13d<br>
    pks-system        Active   13d<br>
    velero            Active   2m38s
    </pre>
    
### <a id='velero-credentials-secret'></a> Create a Velero vSphere Credential Secret
    
1. Create the `csi-vsphere.conf` file with the following details:
    
    ```
    [Global]
    cluster-id = "CLUSTER-NAME"                
    [VirtualCenter "IP-ADDRESS"]    
    user = "USERNAME"       
    password = "PASSWORD" 
    port = "443" 
    ```    
          
    Where:  
      
    * `CLUSTER-NAME` is the name of your cluster.
    * `IP-ADDRESS` is the IP address of the vCenter Server.
    * `USERNAME` is the username that you want to use.
    * `PASSWORD` is the username that you want to use.
               
1. Create the secret:
    
    ```
    kubectl -n NAMESPACE create secret generic velero-vsphere-config-secret --from-file=csi-vsphere.conf
    ```
      
    Where `NAMESPACE` is the Velero namespace.
    
### <a id='create-vsphere-plugin-config-file'></a> Create the Velero vSphere Plugin Configuration File 
    
1. Create a ConfigMap YAML file. For example `configmap.yaml`.  
1. Modify the ConfigMap file with the following:  
    
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: velero-vsphere-plugin-config
      data:
      cluster_flavor:           "VANILLA"
      vsphere_secret_name:      "SECRET-NAME"
      vsphere_secret_namespace: "SECRET-NAMESPACE"  #optional, default is velero
    ```
        
    Where:  
    
    * `SECRET-NAME` is the name you applied to your Velero secret.  
    * `SECRET-NAMESPACE` is the secret namespace. For example `velero`.  
        
1. Save the ConfigMap file.  
1. Apply the ConfigMap:  
     
    ```
    kubectl apply -f CONFIGMAP-FILE -n SECRET-NAMESPACE
    ```
        
    Where:  
    
    * `CONFIGMAP-FILE` is the name of your ConfigMap file. For example `configmap.yaml`.  
    * `SECRET-NAMESPACE` is the secret namespace. For example `velero`.  

### <a id='velero-vsphere-plugin-install'></a> Install Velero vSphere Plugin

1. Install the Velero plugin for vSphere:  

    ```
    velero plugin add projects.registry.vmware.com/tkg/velero/velero-plugin-for-vsphere:v1.4.0_vmware.1
    ```

1. Configure the Velero snapshot location:  

    ```
    velero snapshot-location create vsl-vsphere --provider velero.io/vsphere
    ```

1. Verify the `velero` pod:

    ```
    kubectl get all -n velero
    ```

    For example:  
    
    <pre class="terminal">
    $ kubectl get all -n velero<br><br>
    NAME                         READY   STATUS             RESTARTS   AGE<br>
    pod/velero-8dc7498d9-9v7x4   1/1     Running            0          30s
    </pre>

1. Verify the snaphost plugin:

    ```
    velero plugin get
    ```

    Confirm the vsphere `VolumeSnapshotter` plugin is included in the returned list.  

    For example:  
    
    <pre class="terminal">
    $ velero plugin get<br><br>
    NAME                               KIND<br>
    velero.io/crd-remap-version        BackupItemAction<br>
    velero.io/pod                      BackupItemAction<br>
    velero.io/pv                       BackupItemAction<br>
    velero.io/service-account          BackupItemAction<br>
    velero.io/vsphere-pvc-backupper    BackupItemAction<br>
    velero.io/vsphere-pvc-deleter      DeleteItemAction<br>
    velero.io/aws                      ObjectStore<br>
    velero.io/add-pv-from-pvc          RestoreItemAction<br>
    velero.io/add-pvc-from-pod         RestoreItemAction<br>
    velero.io/change-pvc-node-selector RestoreItemAction<br>
    velero.io/change-storage-class     RestoreItemAction<br>
    velero.io/cluster-role-bindings    RestoreItemAction<br>
    velero.io/crd-preserve-fields      RestoreItemAction<br>
    velero.io/init-restore-hook        RestoreItemAction<br>
    velero.io/job                      RestoreItemAction<br>
    velero.io/pod                      RestoreItemAction<br>
    velero.io/role-bindings            RestoreItemAction<br>
    velero.io/service                  RestoreItemAction<br>
    velero.io/service-account          RestoreItemAction<br>
    velero.io/vsphere-pvc-restorer     RestoreItemAction<br>
    velero.io/aws                      VolumeSnapshotter<br>
    velero.io/vsphere                  VolumeSnapshotter<br>
    </pre>

### <a id='velero-vcp-csi-migration'></a> Back up the VCP Volumes Migrated to vSphere CSI Driver

Follow this step if you want to back up the VCP volumes that were migrated to vSphere CSI Driver.

1. Create the `velero-vsphere-plugin-feature-states.yaml` ConfigMap file.
1. Modify the ConfigMap file with the following:  
    
    ```
    apiVersion: v1
    data:
      csi-migrated-volume-support: "true"
      decouple-vsphere-csi-driver: "true"
      local-mode: "false"
    kind: ConfigMap
    metadata:
   name: velero-vsphere-plugin-feature-states
   ```
    
1. Save the ConfigMap file.  
1. Apply the ConfigMap:  
 
    ```
    kubectl apply -f velero-vsphere-plugin-feature-states.yaml -n velero
    ```
###<a id='velero-memory'></a> Adjust Velero Memory Limits If Necessary

If your Velero backup returns `status=InProgress` for many hours,
increase the limits and requests memory settings. To do this:

1. Run the following command:  

    ```
    kubectl edit deployment/velero -n velero
    ```

1. Change the limits and request memory settings from the default of
`256Mi` and `128Mi` to `512Mi` and `256Mi`:  

    ```
    ports:
    - containerPort: 8085
      name: metrics
      protocol: TCP
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 256Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    ```
    
##<a id='velero-cluster-install-airgapped'></a> Install Velero in an Air-Gapped Environment

If you are working in an air-gapped environment, you can install Velero using an internal registry.
For more information, see [Air-gapped deployments](https://velero.io/docs/v1.8/on-premises/#air-gapped-deployments)
in the Velero documentation.  

###<a id='velero-cluster-install-airgapped-prereqs'></a> Prerequisites

Ensure the following before installing Velero in an air-gapped environment:  

* A private container registry is installed and configured.
The procedure below uses a VMware Harbor Container Registry.  
* Docker is installed on the workstation or <%= vars.k8s_runtime_abbr %> jump host.  
* kubectl context has been set and the MinIO `credentials-minio` file exists. 
For more information, see [Set Up the kubectl Context ](#velero-cluster-setup) above.  

###<a id='velero-cluster-install-airgapped-procedure'></a> Procedure

1. Open the VMware Velero downloads page for your version of <%= vars.k8s_runtime_abbr %> 
linked to from the _Product Snapshot_ of the [Release Notes](release-notes.html).  
1. Download the Velero CLI and Velero Plugin for vSphere images for your version of <%= vars.k8s_runtime_abbr %>:  

    ```
    backup-driver-v1.4.0_vmware.1.tar.gz
    data-manager-for-plugin-v1.4.0_vmware.1.tar.gz
    velero-plugin-for-vsphere-v1.4.0_vmware.1.tar.gz
    ```
    <p class="note"><strong>Note</strong>: You must use the container images signed by VMware to be eligible for support from VMware.</p>

1. Push the Docker images into the internal registry. Adjust the variables as needed for your registry instance and preferences.  

    ```
    docker login harbor.example.com
    docker load -i backup-driver-v1.4.0_vmware.1.tar.gz
    docker tag vmware-tanzu/backup-driver:v1.4.0_vmware.1  harbor.example.com/vmware-tanzu/backup-driver:v1.4.0_vmware.1
    docker load -i velero-plugin-for-vsphere-v1.4.0_vmware.1.tar.gz
    docker tag vmware-tanzu/velero-plugin-for-vsphere:v1.4.0_vmware.1  harbor.example.com/vmware-tanzu/velero-plugin-for-vsphere:v1.4.0_vmware.1
    docker load -i data-manager-for-plugin-v1.4.0_vmware.1.tar.gz
    docker tag vmware-tanzu/data-manager-for-plugin:v1.4.0_vmware.1  harbor.example.com/vmware-tanzu/data-manager-for-plugin:v1.4.0_vmware.1
    docker push harbor.example.com/vmware-tanzu/backup-driver:v1.4.0_vmware.1
    docker push harbor.example.com/vmware-tanzu/velero-plugin-for-vsphere:v1.4.0_vmware.1
    docker push harbor.example.com/vmware-tanzu/data-manager-for-plugin:v1.4.0_vmware.1
    ```

4. Install Velero:  

    ```
    velero install --image harbor.example.com/vmware-tanzu/velero:v1.8.1_vmware.1 \
    --plugins harbor.example.com/vmware-tanzu/velero-plugin-for-aws-v1.4.1_vmware.1 \
    --provider aws --bucket tkgi-velero --secret-file ./credentials-minio \
    --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://IP-ADDRESS:PORT,publicUrl=http://IP-ADDRESS:PORT --snapshot-location-config region=minio
    ```
    Where:
    
    * `IP-ADDRESS` is the IP address that is used to connect to the MinIO server.
    * `PORT` is the number of the port that is used to connect to the MinIO server.
    
    For example:  
    
    <pre class="terminal">
    $ velero install --image harbor.example.com/vmware-tanzu/harbor.example.com/vmware-tanzu/velero:v1.8.1_vmware.1 --plugins harbor.example.com/vmware-tanzu/velero-plugin-for-aws-v1.4.1_vmware.1 --provider aws --bucket tkgi-velero --secret-file ./credentials-minio  --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http<span>:</span>//20.20.224.27:9000,publicUrl=http<span>:</span>//20.20.224.27:9000 --snapshot-location-config region=minio<br>
    Velero is installed! Use 'kubectl logs deployment/velero -n velero' to view the status.
    </pre>

    For more information about installing Velero, see
    [On-Premises Environments](https://velero.io/docs/v1.8/on-premises/) 
    in the Velero documentation.  

1. Complete the steps in [Create the Velero vSphere Plugin Configuration File](#create-vsphere-plugin-config-file) above. 
You must create the Velero vSphere plugin configuration file before installing the Velero plugin for vSphere.  
5. Install the Velero plugin for vSphere:  

    ```
    velero plugin add harbor.example.com/vmware-tanzu/velero-plugin-for-vsphere:v1.4.0_vmware.1
    ```
    