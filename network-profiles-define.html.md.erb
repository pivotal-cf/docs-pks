---
title: Creating and Managing Network Profiles (NSX Only)
owner: TKGI
---

This topic describes how <%= vars.product_full %> (<%= vars.k8s_runtime_abbr %>) administrators
can create and delete network profiles for <%= vars.k8s_runtime_abbr %>-provisioned Kubernetes clusters on vSphere with NSX integration.

This topic also describes the use cases for when a <%= vars.k8s_runtime_abbr %> administrator must use a network profile.

<br>
<br>
## <a id='prerequisites'></a> Prerequisite

<%= vars.k8s_runtime_abbr %> supports network profiles on <%= vars.k8s_runtime_abbr %> on vSphere with NSX&#8209;T only.  

To work with <%= vars.k8s_runtime_abbr %> network profiles you must be either a cluster manager or cluster administrator:

* To create or delete a network profile, you must be a cluster administrator: `pks.clusters.admin`.

* To use a network profile, you must be a cluster manager: `pks.clusters.manage` or a cluster administrator: `pks.clusters.admin`.

<p class="note"><strong>Note:</strong> If a cluster manager, <code>pks.clusters.manage</code>, attempts to create or delete a network profile, 
    the following error occurs: "<i>You do not have enough privileges to perform this action. 
    Please contact the <%= vars.k8s_runtime_abbr %> administrator.</i>"
</p>

<br>
<br>
## <a id='overview'></a> Overview

You can use network profiles to customize your <%= vars.k8s_runtime_abbr %> Kubernetes clusters on vSphere with NSX&#8209;T. 
For information on when to use network profiles, see [Network Profile Use Cases](#use-cases) below.  

<%= vars.k8s_runtime_abbr %> cluster administrators can administer network profiles in the following ways:

* [Create a Network Profile](#create)
* [Update an Existing Network Profile](#change-pod-ips)
* [Delete a Network Profile](#delete)

<%= vars.k8s_runtime_abbr %> cluster administrators can also use network profiles in all the ways that a cluster manager can:

* [List Network Profiles](network-profiles.html#list-profiles)  
* [Create a Cluster with a Network Profile](network-profiles.html#create-new)  
* [Assign a Network Profile to an Existing Cluster](network-profiles.html#assign-profile)  
* [Update an Existing Network Profile](network-profiles.html#update-profile)  


For information on managing network profiles, see [Using and Managing Network Profiles](network-profiles.html).  

<br>
<br>
## <a id="create"></a> Create a Network Profile 

The following is the basic structure of a network profile JSON configuration:

```
{
    "name": "PROFILE-NAME",
    "description": "PROFILE-DESCRIP",
    "parameters": {
        TOP-LEVEL-PARAMETERS,
        "cni_configurations": {
            "type": "nsxt",
            "parameters": {
                CNI-CONFIGURATIONS-PARAMETERS
            }
        }
    }
}
```

Where:  

* `PROFILE-NAME` is the internal name of the network profile.
* `PROFILE-DESCRIP` is an internal description of the network profile.
* `TOP-LEVEL-PARAMETERS` are one or more comma-delimited 
    top-level `parameters` in a Network Profile.
    For more information, see [Top-Level Parameters](#top-level-params) below.
* `CNI-CONFIGURATIONS-PARAMETERS`  are one or more comma-delimited 
    `cni_configurations` `parameters` in a Network Profile.
    For more information, see 
    [cni_configurations Parameters](#cni-params) below.

To create a network profile in <%= vars.k8s_runtime_abbr %>:

1. Create a network profile configuration JSON file with the following content:  

    ```
    {
        "name": "PROFILE-NAME",
        "description": "PROFILE-DESCRIP",
        "parameters": {

            "cni_configurations": {
                "type": "nsxt",
                "parameters": {

                    "extensions":{
                        "ncp":{
                            "nsx_v3":{
                            },
                            "coe":{
                            },
                            "ha":{
                            },
                            "k8s":{
                            }
                        },
                        "nsx-node-agent":{
                        }
                    }
                }
            }
        }
    }
    ```

    Where:  

    * `PROFILE-NAME` is the internal name for your network profile.
    * `PROFILE-DESCRIP` is an internal description for your network profile.

1. Edit the file to specify your network parameters.
For information about the available network parameters, see [Network Profile Parameters](#params) below.

1. Review your network profile configuration carefully. 
If you are modifying an existing cluster, ensure that you are modifying only parameters that support modification. 
For information on which network profile parameters are updateable in this version of <%= vars.k8s_runtime_abbr %>, 
see the network profile parameters tagged `Updatable` in the [Network Profile Parameters](#params) tables below. 
You cannot modify any other network profile parameters on an existing cluster.  

1. To create a network profile from your network profile configuration,
run the following <%= vars.k8s_runtime_abbr %> CLI command:  

    ```
    tkgi create-network-profile PATH-TO-YOUR-NETWORK-PROFILE-CONFIGURATION
    ``` 
    Where `PATH-TO-YOUR-NETWORK-PROFILE-CONFIGURATION` is the path to your network profile configuration file.
<br><br>
    For example:

    ```console
    $ tkgi create-network-profile np-routable-pods.json

    Network profile example-network-profile successfully created
    ```
1. Store a copy of your network profile configuration in case you need to modify the network profile in the future.  

Cluster managers can create new clusters with your network profile and assign your network profile to existing clusters.
For information on managing network profiles, see [Using and Managing Network Profiles](network-profiles.html).  

<br>
### <a id="profile-example"></a> Network Profile Example

The following is an example of a complete network profile JSON configuration:

```
{
    "name": "example-network-profile",
    "description": "Example Network Profile with All Available Parameters -- FOR ILLUSTRATION PURPOSES ONLY",
    "parameters": {
        "lb_size": "large",
        "pod_ip_block_ids": [
            "ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
            "ebe78a74-a5d5-4dde-ba76-9cf4067eee56" ],
        "pod_subnet_prefix": 27,
        "pod_routable": true,
        "fip_pool_ids": [
            "e50e8f6e-1a7a-45dc-ad49-3a607baa7fa0",
            "ebe78a74-a5d5-4dde-ba76-9cf4067eee55" ],
        "t0_router_id": "5a7a82b2-37e2-4d73-9cb1-97a8329e1a90",
        "master_vms_nsgroup_id": "9b8d535a-d3b6-4735-9fd0-56305c4a5293",
        "node_ip_block_ids": [
            "2250dc43-63c8-4bb8-b8cf-c6e12ccfb7de", "3d577e5c-dcaf-4921-9458-d12b0e1318e6" ],
        "node_routable": true,
        "node_subnet_prefix": 20,
        "nodes_dns": [
            "8.8.8.8", "192.168.115.1", "192.168.116.1" ],      
        "dns_lookup_mode": "API_INGRESS",
        "ingress_prefix": "ingress",
        "single_tier_topology": true,
        "infrastructure_networks": [
            "30.0.0.0/24",
            "192.168.111.0/24",
            "192.168.115.1" ],
        "failover_mode": "PREEMPTIVE",        
        "cni_configurations": {
            "type": "nsxt",
            "parameters": {
                "nsx_lb": false, 
                "x_forwarded_for": "insert",
                "ingress_ip": "192.168.160.212",
                "log_settings": {
                    "log_level": "DEBUG",
                    "log_firewall_traffic": "ALL" },
                "ingress_persistence_settings": {
                    "persistence_type": "cookie",
                    "persistence_timeout": 1 },
                "max_l4_lb_service": 10,
                "l4_persistence_type": "source_ip",
                "l4_lb_algorithm": "weighted_round_robin",
                "top_firewall_section_marker":"section-id",
                "bottom_firewall_section_marker":"section-id",
                "lb_http_request_header_size":60,
                "lb_http_response_header_size":45,
                "lb_http_response_timeout":30,
                "connect_retry_timeout":30,
                "enable_hostport": true, 
                "enable_nodelocaldns": true,
                "client_ssl_profile": "example_ssl_profile_ID",
                "lb_connection_multiplexing_enabled": true,
                "lb_connection_multiplexing_number": 80,
                "extensions":{
                    "ncp":{
                        "nsx_v3":{
                            "retries":"10"
                        },
                        "coe":{
                            "profiling":"False"
                        },
                        "ha":{
                            "heartbeat_period":6
                        },
                        "k8s":{
                            "lb_ip_allocation":"relaxed"
                        }
                    },
                    "nsx-node-agent":{
                        "connect_retry_timeout":60
                    }

                }  
            }
        }
    }
}
```
<p class="note"><strong>Note:</strong> This example network profile is for illustration purposes only. 
It is not intended to be used as a template for a network profile configuration.
</p>


<br>
<br>
## <a id="change-pod-ips"></a> Update an Existing Network Profile

To update an existing cluster's network profile:

1. [Confirm the Network Profile Property Supports Updates](#supports-updates)  
1. [Create a Modified Network Profile Configuration](#create-modified-profile-configuration)  
1. [Create a Modified Network Profile](#create-modified-profile)  
1. [Update the Cluster With a Modified Network Profile](#update-w-modified-profile)  

<br>
### <a id="supports-updates"></a> Confirm the Network Profile Property Supports Updates

After you create a cluster, you can modify only specific network profile parameters. 
Ensure that you modify only parameters that support modification.  

For information on which network profile parameters are updateable in this version of <%= vars.k8s_runtime_abbr %>, 
see the network profile parameters tagged `Updatable` in the [Network Profile Parameters](#params) tables below. 
You cannot modify any other network profile parameters on an existing cluster.  

For more information, see [Update-Cluster Network Profile Validation Rules](#update-restrictions) below.   

<br>
### <a id="create-modified-profile-configuration"></a> Create a Modified Network Profile Configuration

To create a modified network profile configuration file:

1. Make a copy of your original network profile configuration file.  
<br>
   If it is not possible to obtain the original network profile, create a new network profile with the original values in all of the fields.  
1. Change the <code>name</code> field to a unique name.  
1. If you are updating the `pod_ip_block_ids` field, reorder the IP Block IDs or add additional IP Block IDs.  
<br>
    For example, the following network profile has two `pod_ip_block_ids`, the first is the original IP block used when creating the cluster, and the second is the new IP block to use for pods. 

    ```
    {
        "description": "Example network profile for adding pod IP addresses to an existing cluster",
        "name": "pod-ips-add",
        "parameters": {
          "pod_ip_block_ids": [
            "ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
            "ebe78a74-a5d5-4dde-ba76-9cf4067eee56"
          ]
        }
    }
    ```

    <p class="note"><strong>Note:</strong> 
    Update only network profile properties that support being updated.
    </p>

    For more information on configuring a network profile, see [Network Profile Parameters](#params) above.   

1. Review and save the network profile configuration file.  
1. Store a copy of your network profile configuration in case you need to modify the network profile in the future.  

<br>
### <a id="create-modified-profile"></a> Create a Modified Network Profile

To create a network profile from a configuration file:

1. Run the following <%= vars.k8s_runtime_abbr %> CLI command:  

    ```
    tkgi create-network-profile PATH-TO-YOUR-NETWORK-PROFILE-CONFIGURATION
    ``` 
    Where `PATH-TO-YOUR-NETWORK-PROFILE-CONFIGURATION` is the path to your network profile configuration file.  

<br>
### <a id="update-w-modified-profile"></a> Update the Cluster with a Modified Network Profile

To update a cluster with a modified network profile:

1. If you are updating a cluster that uses a public cloud CSI driver, 
see [Limitations on Using a Public Cloud CSI Driver](release-notes.html#1-15-0-csi-driver-limits) 
in _Release Notes_ for additional requirements.  
1. To apply the network profile created above to your cluster, run the following command::  

    ```
    tkgi update-cluster CLUSTER-NAME --network-profile NETWORK-PROFILE-NAME
    ```

    Where:  

    * `CLUSTER-NAME` is the unique name of your cluster.
    * `NETWORK-PROFILE-NAME` is the name of the network profile you want to use for your cluster.

<%= vars.k8s_runtime_abbr %> validates the network profile before updating the cluster with the new network profile. 
For more information, see [Update-Cluster Network Profile Validation Rules](#update-restrictions) below.  

<p class="note warning"><strong>WARNING</strong>: Update the network profile only on a <%= vars.k8s_runtime_abbr %> cluster that has been upgraded to the current <%= vars.k8s_runtime_abbr %> version. For more information, see <a href="understanding-upgrades.html#control-plane-upgrades-supported-tasks">Tasks Supported Following a <%= vars.k8s_runtime_abbr %> Control Plane Upgrade</a> in <em>About <%= vars.product_short %> Upgrades</em>.
</p>

<br>
### <a id="update-restrictions"></a> Update-Cluster Network Profile Validation Rules

<%= vars.k8s_runtime_abbr %> uses strict validation rules before applying a network profile to a cluster
with an existing network profile:

- If a field in the original network profile is empty, the system ignores the empty field even if the field is included in the new network profile.  
- If a field in the new network profile is empty, the system ignores the field even if the field is not empty in the original network profile.  
- If the `pod_ip_block_ids` field in the new network profile contains the same entries as the existing network profile, 
the entry passes validation.  
- If a field in the new network profile conflicts with the field in the existing network profile, the system reports the conflict and fails the validation.  

<br>
<br>
## <a id="delete"></a> Delete a Network Profile

<%= vars.k8s_runtime_abbr %> administrators can delete a network profile that is not in use.

To delete a network profile:  

1. Run the following <%= vars.k8s_runtime_abbr %> CLI command:

    ```
    tkgi delete-network-profile NETWORK-PROFILE-NAME
    ```

    Where `NETWORK-PROFILE-NAME` is the name of the network profile you want to delete.

<p class="note"><strong>Note:</strong> 
You cannot delete a network profile that is in use.
</p>

<br>
<br>
## <a id="params"></a> Network Profile Parameters

The [Top-Level Parameters](#top-level-params) and [cni_configurations Parameters](#cni-params)
sections below describe the parameters you can add to a Network Profile.

<br>
### <a id="top-level-params"></a> Top-Level Parameters

<%= vars.k8s_runtime_abbr %> supports the following top-level network profile parameters:

<table>
    <tr>
        <th width=33%>Parameter</th>
        <th>Type</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>name</code></td>
        <td>String</td>
        <td>User-defined name of the network profile.</td>
    </tr>
    <tr>
        <td><code>description</code></td>
        <td>String</td>
        <td>User-defined description for the network profile.</td>
    </tr>
    <tr>
        <td><code>parameters</code></td>
        <td>Map</td>
        <td>Map containing one or more name-value pairs. </td>
    </tr>
    <tr>
        <td><code>cni_configurations</code></td>
        <td>Map<br><strong>Updatable</strong></td>
        <td>Map containing <code>type</code> and <code>parameters</code> key-value pairs for configuring NCP (see table below).</td>
    </tr>
    <tr>
        <td><code>dns_lookup_mode</code></td>
        <td>String</td>
        <td>DNS lookup mode.<br>Values: <code>"API"</code>, <code>"API_INGRESS"</code>.<br>For Kubernetes API LB: <code>"API"</code>.<br>For Ingress controller: <code>"API_INGRESS"</code>.</td>
    </tr>
    <tr>
        <td><code>failover_mode</code></td>
        <td>String</td>
        <td>If the preferred node fails and recovers, enable the node to preempt a peer as the active node.<br>Values: <code>"PREEMPTIVE"</code>, <code>"NON_PREEMPTIVE"</code>.<br>Default: <code>"PREEMPTIVE"</code>.</td>
    </tr>
    <tr>
        <td><code>fip_pool_ids</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Array of floating IP pool UUIDs defined in NSX-T.</td>
    </tr>
    <tr>
        <td><code>infrastructure_networks</code></td>
        <td>String</td>
        <td>Array of IP addresses and subnets for Node Networks for use with a Shared Tier-1 topology in a Multi-Tier-0 environment.</td>
    </tr>
    <tr>
        <td><code>ingress_prefix</code></td>
        <td>String</td>
        <td>Ingress controller hostname prefix for DNS lookup. 
        If DNS mode is set to <code>API_INGRESS</code>, <%= vars.k8s_runtime_abbr %> creates the cluster with 
        <span style="white-space: nowrap;"><i>ingress_prefix.hostname</i></span> as the Kubernetes control plane FQDN. 
        <%= vars.k8s_runtime_abbr %> confirms that the ingress subdomain can be resolved as a subdomain prefix on the host before creating new clusters.  
        </td>
    </tr>
    <tr>
        <td><code>lb_size</code></td>
        <td>String</td>
        <td>Size of the NSX-T load balancer service.<br>Values: <code>"small"</code>, <code>"medium"</code>, <code>"large"</code>.<br>Default: <code>"small"</code>.</td>
    </tr>
    <tr>
        <td><code>master_vms_nsgroup_id</code></td>
        <td>String</td>
        <td>Namespace Group UUID as defined in NSX-T.</td>
    </tr>
    <tr>
        <td><code>nodes_dns</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Array (up to 3) of DNS server IP addresses for lookup of Kubernetes nodes and pods.</td>
    </tr>
    <tr>
        <td><code>pod_ip_block_ids</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Array of Pod IP Block UUIDs.</td>
    </tr>
    <tr>
        <td><code>pod_routable</code></td>
        <td>Boolean</td>
        <td>Make the Pods subnet routable.<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>false</code>.</td>
    </tr>
    <tr>
        <td><code>pod_subnet_prefix</code></td>
        <td>Integer</td>
        <td>Size of the Pods IP Block subnet.</td>
    </tr>
    <tr>
        <td><code>single_tier_topology</code></td>
        <td>Boolean</td>
        <td>Use a single Tier-1 Router per cluster (shared).<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>true</code>.</td>
    </tr>
    <tr>
        <td><code>t0_router_id</code></td>
        <td>String</td>
        <td>Tenant Tier-0 Router UUID defined in NSX-T.</td>
    </tr>
</table>

<p class="note"><strong>Note:</strong> On an existing cluster, you can modify 
    only the network profile parameters that are labeled <b>Updatable</b>.
</p>

<br>
### <a id="cni-params"></a> cni_configurations Parameters

<%= vars.k8s_runtime_abbr %> supports the following `cni_configurations` parameters:

<table>
    <tr>
        <th width=33%>Parameter</th>
        <th>Type</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>type</code></td>
        <td>Constant<br>String</td>
        <td>Values: <code>"nsxt"</code>.</td>
    </tr>
    <tr>
        <td><code>parameters</code></td>
        <td>Map</td>
        <td>Map containing one or more key-value pairs for NCP settings.</td>
    </tr>
    <tr>
        <td><code>bottom_firewall_section_marker</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>UUID of the bottom <code>section-id</code> for the distributed firewall (DFW) section as defined in NSX-T.<br>See also: <code>top_firewall_section_marker</code> 
            below and <a href="network-profiles-ncp-dfw.html">Define DFW Section Markers</a>.</td>
    </tr>
    <tr>
        <td><code>client_ssl_profile</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>The NSX-T client-side ssl profile to use, exposed by NCP as <code>client_ssl_profile</code>.
            <br>Default: The default NCP client SSL profile. 
            For more information, see <a href="#parameter-client-ssl-profile">client_ssl_profile</a> below.</td>
    </tr>
    <tr>
        <td><code>connect_retry_timeout</code></td>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>Configure HTTP LoadBalancer connection retry timeout.<br>Example Value:<code>30</code>.<br>See also: <code>lb_http_response_timeout</code> and <code>persistence_timeout</code>.</td>
    </tr>
    <tr>
        <td><code>enable_hostport</code></td>
        <td>Boolean<br><strong>Updatable</strong></td>
        <td>Enable NCP support for Kubernetes Host Port.<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>false</code>.</td>
    </tr>
    <tr>
        <td><code>enable_nodelocaldns</code></td>
        <td>Boolean<br><strong>Updatable</strong></td>
        <td>Enable NCP support for Kubernetes NodeLocal DNSCache.<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>false</code>.</td>
    </tr>
    <tr>
        <td><code>extensions</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Additional NCP and NSX Node Agent settings not included as explicit <code>cni_configurations</code> parameters.<br>
            For more information see <a href="#extensions">extensions</a> below.</td>
    </tr>
    <tr>
        <td><code>ingress_ip</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String</td>
        <td>IP address to use for the ingress controller load balancer.</td>
    </tr>
    <tr>
        <td><code>ingress_persistence_settings</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String<br><strong>Updatable</strong></td>
        <td>Map containing one or more key-value pairs for customizing Layer 7 persistence.<br>See also: <code>persistence_timeout</code> and <code>persistence_type</code></td>
    </tr>
    <tr>
        <td><code>l4_lb_algorithm</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String<br><strong>Updatable</strong></td>
        <td>Layer 4 load balancer behavior.<br>Values: <code>"round_robin"</code>, <code>"least_connection"</code>,<code>"ip_hash"</code>, <code>"weighted_round_robin"</code>.<br>Default: <code>"round_robin"</code>.
            <br>See also: <code>l4_persistence_type</code> and <code>max_l4_lb_service</code>.</td>
    </tr>
    <tr>
        <td><code>l4_persistence_type</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String<br><strong>Updatable</strong></td>
        <td>Connection stickiness based on <code>source_ip</code>.<br>Values: <code>"source_ip"</code>.<br>See also: <code>l4_lb_algorithm</code> and <code>max_l4_lb_service</code>.</td>
    </tr>
    <tr>
        <td><code>lb_connection_multiplexing_enabled</code></td>
        <td>Boolean<br><strong>Updatable</strong></td>
        <td>Enable NSX-T load balancer TCP multiplexing.<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>false</code>.</td>
    </tr>
    <tr>
        <td><code>lb_connection_multiplexing_number</code></td>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>The maximum number of NSX-T load balancer TCP multiplexing connections.<br>Default: <code>6</code>.</td>
    </tr>
    <tr>
        <td><code>lb_http_request_header_size</code></td>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>Configure HTTP LoadBalancer request header size.<br>Example Value:<code>60</code>.</td>
    </tr>
    <tr>
        <td><code>lb_http_response_header_size</code></td>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>Configure HTTP LoadBalancer response header size.<br>Example Value:<code>45</code>.</td>
    </tr>
    <tr>
        <td><code>lb_http_response_timeout</code></td>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>Configure HTTP LoadBalancer response timeout.<br>Example Value:<code>30</code>.<br>See also: <code>connect_retry_timeout</code> and <code>persistence_timeout</code>.</td>
    </tr>    
    <tr>
        <td><code>log_dropped_traffic</code></td>
        <td>Boolean<br><strong>Updatable</strong></td>
        <td><strong>Deprecated</strong>.<br>Use <code>log_firewall_traffic</code> instead.
            <br>Log dropped firewall traffic.
            <br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>false</code>.
            <br>A <code>log_settings</code> parameter. See also: <code>log_firewall_traffic</code>, <code>log_level</code>, <code>log_settings</code>.
        </td>
    </tr>
    <tr>
        <td><code>log_firewall_traffic</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Log firewall traffic.
            <br>Values: <code>ALL</code>, <code>ALLOW</code>, <code>DENY</code>.<br>Default: <code>DENY</code>.
            <br>A <code>log_settings</code> parameter. See also: <code>log_level</code>, <code>log_settings</code>.
        </td>
    </tr>    
    <tr>
        <td><code>log_level</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>Values: <code>"INFO"</code>, <code>"WARNING"</code>, <code>"DEBUG"</code>, <code>"ERROR"</code>, <code>"CRITICAL"</code>.
            <br>A <code>log_settings</code> parameter. See also: <code>log_firewall_traffic</code>, <code>log_settings</code>.
        </td>
    </tr>
    <tr>
        <td><code>log_settings</code></td>
        <td>Map<br><strong>Updatable</strong></td>
        <td>Parameters for configuring NCP logging.
            <br>See also: <code>log_dropped_traffic</code>, <code>log_firewall_traffic</code>, <code>log_level</code>.
        </td>
    </tr>
    <tr>
        <td><code>max_l4_lb_service</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>Limit the maximum number of layer 4 virtual servers per cluster.<br>Minimum Value:<code>1</code>.<br>See also: <code>l4_lb_algorithm</code> and <code>l4_persistence_type</code>.</td>
    </tr>
    <tr>
        <td><code>nsx_ingress_controller</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>Boolean</td>
        <td><strong>Deprecated</strong>.
            <br>Use NSX-T layer 7 virtual server as the ingress controller for the Kubernetes cluster. 
            <br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>true</code>.
        </td>
    </tr>
    <tr>
        <td><code>nsx_lb</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>Boolean<br><strong>Updatable</strong></td>
        <td>Use NSX-T layer 4 virtual server for each Kubernetes service of type LoadBalancer.<br>Values: <code>true</code>, <code>false</code>.<br>Default: <code>true</code>.</td>
    </tr>
    <tr>
        <td><code>persistence_timeout</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>Integer<br><strong>Updatable</strong></td>
        <td>An <code>ingress_persistence_settings</code> parameter. Persistence timeout interval in seconds.<br>See also: <code>connect_retry_timeout</code> and <code>lb_http_response_timeout</code>.</td>
    </tr>
    <tr>
        <td><code>persistence_type</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String<br><strong>Updatable</strong></td>
        <td>An <code>ingress_persistence_settings</code> parameter. Specify the ingress persistence type.<br>Values: <code>"none"</code>, <code>"cookie"</code>, <code>"source_ip"</code>.
        <br>Default: <code>"none"</code>.</td>
    </tr>
    <tr>
        <td><code>top_firewall_section_marker</code></td>
        <td>String<br><strong>Updatable</strong></td>
        <td>UUID of the top <code>section-id</code> for the distributed firewall (DFW) section as defined in NSX-T.<br>See also: <code>bottom_firewall_section_marker</code> 
            above and <a href="network-profiles-ncp-dfw.html">Define DFW Section Markers</a>.</td>
    </tr>
    <tr>
        <td><code>x_forwarded_for</code></td>
        <%# Also update tables in:
            network-profiles-define 
            _ic-network-profile  
            #%>
        <td>String<br><strong>Updatable</strong></td>
        <td>Sets the original client source IP in the request header. 
          Enabling the network profile <code>x\_forwarded\_for</code> parameter automatically enables the 
          <code>x\_forwarded\_port</code> and <code>x\_forward\_protocol</code> parameters.<br>Accepts <code>"none"</code>, <code>"insert"</code>, 
          <code>"replace"</code>.<br>Default: <code>"none"</code>.
        </td>    
    </tr>
</table>
<%#bottom&#95;firewall&#95;section&#95;marker#%>
<p class="note"><strong>Note:</strong> On an existing cluster, you can modify 
    only the network profile parameters that are labeled <b>Updatable</b>.
</p>

<br>
### <a id='cni-extensions'></a> cni_configurations Extensions Parameters

Configure the less commonly configured NCP and NSX Node Agent settings in the network profile CNI configuration `extensions` field.  

Use the network profiles `extensions` field to configure an NCP ConfigMap or NSX Node Agent ConfigMap property 
that is applicable to <%= vars.k8s_runtime_abbr %> but is not explicitly supported as a `cni_configurations` parameter.  

NCP and NSX Node Agent settings supported as explicit Network Profiles parameters cannot be configured through extensions.  

For more information about any of these parameters, see [The nsx-ncp-config ConfigMap](https://docs.vmware.com/en/VMware-NSX-Container-Plugin/4.1/ncp-kubernetes/GUID-2122160A-7B39-4F73-9ED3-6E1C2346E265.html) 
and [The nsx-node-agent-config ConfigMap](https://docs.vmware.com/en/VMware-NSX-Container-Plugin/4.1/ncp-kubernetes/GUID-0239D3D6-B1A7-42A7-ABAD-200B040B28DE.html) 
in the VMware NSX Container Plugin documentation.

<table>
<tr>
    <th>Parameter</th>
    <th>Type</th>
    <th>Description</th>
</tr>
<%#  <tr><td>ncp.coe.adaptor</td><td>String</td><td>Container orchestrator adaptor to plug in.    <br>Values: <code>kubernetes</code>, <code>openshift</code>, <code>pcf</code>.    <br>Default: <code>kubernetes</code>.</td></tr>    #%>
<%#  <tr><td>ncp.coe.node_type</td><td>String</td><td>Container host node type.    <br>Values: <code>BAREMETAL</code>, <code>CLOUD</code>, <code>HOSTVM</code>.    <br>Default: <code>HOSTVM</code>.</td></tr>     #%>
<%#  <tr><td>ncp.coe.profiling</td><td>Boolean<br><strong>Updatable</strong></td>    <td>Values: <code>TRUE</code>, <code>FALSE</code>.    <br>Default: <code>FALSE</code>.</td></tr>  #%>
<tr><td>ncp.k8s.enable_namespace_subnets</td><td>Boolean<br><strong>Updatable</strong></td><td><strong>Policy Only</strong><br>
    Allow user to set ncp/subnets annotation on namespace to specify the subnets for no-snat namespace.
    <br>Values: <code>TRUE</code>, <code>FALSE</code>.
    <br>Default: <code>FALSE</code>.</td></tr>
<tr><td>ncp.k8s.http_ingress_port</td><td>Integer<br><strong>Updatable</strong></td><td>Port for HTTP ingress.<br>Default: <code>80</code>.</td></tr>
<tr><td>ncp.k8s.https_ingress_port</td><td>Integer<br><strong>Updatable</strong></td><td>Port for HTTPS ingress.<br>Default: <code>443</code>.</td></tr>
<tr><td>ncp.k8s.label_filtering_regex_list</td><td>String List<br><strong>Updatable</strong></td>
    <td>List of regex expressions defining the labels that must not be converted to NSX tags.
    <br>Default: <code>[ ]</code>.</td></tr>
<tr><td>ncp.k8s.lb_ip_allocation</td><td>String<br><strong>Updatable</strong></td>
    <td>Allow a virtual IP that is not in the range of external_ip_pools_lb specified in Kubernetes service spec.loadBalancerIP.
    <br>Values: <code>relaxed</code>, <code>strict</code>.
    <br>Default: <code>relaxed</code>.</td></tr>
<tr><td>ncp.k8s.statefulset_ip_range</td><td>Boolean<br><strong>Updatable</strong></td><td><strong>Policy Only</strong><br>
    Locate Pod IP of StatefulSet in the StatefulSet annotation IP range.
    <br>Values: <code>TRUE</code>, <code>FALSE</code>.
    <br>Default: <code>FALSE</code>.</td></tr>
<tr><td>ncp.nsx_v3.cluster_unavailable_retry</td><td>Boolean<br><strong>Updatable</strong></td><td>
    Skip fatal errors and retry the request instead when no endpoint in the NSX management cluster is available to serve a request.
    <br>Default: <code>FALSE</code>.</td></tr>    
<tr><td>ncp.nsx_v3.concurrent_connections</td><td>Integer<br><strong>Updatable</strong></td><td>Maximum concurrent connections to all NSX managers.
    <br>Default: <code>10</code>.</td></tr>
<tr><td>ncp.nsx_v3.conn_idle_timeout</td><td>Integer<br><strong>Updatable</strong></td><td>Time in seconds to wait before ensuring connectivity to the NSX manager.
    <br>Default: <code>10</code>.</td></tr>
<tr><td>ncp.nsx_v3.http_retries</td><td>Integer<br><strong>Updatable</strong></td><td>
    Maximum number of times to retry an HTTP connection.
    <br>Default: <code>3</code>.</td></tr>
<tr><td>ncp.nsx_v3.http_timeout</td><td>Integer<br><strong>Updatable</strong></td><td>The time in seconds before aborting a HTTP connection to a NSX Manager.
    <br>Default: <code>10</code>.</td></tr>
<% if vars.product_version == "COMMENTED"  %>
<tr><td>ncp.nsx_v3.k8s_np_use_ip_sets</td><td>Boolean</td>
    <td>Values: <code>TRUE</code>, <code>FALSE</code>.
        <br>Default: <code>TRUE</code>.
        <br>Must set to <code>TRUE</code> for NSX Management Plane API.
        <br>Must set to <code>FALSE</code> for NSX Policy API.</td></tr>
<% end %>
<tr><td>ncp.nsx_v3.l4_lb_auto_scaling</td><td>Boolean<br><strong>Updatable</strong></td>
    <td>L4 load balancer auto scaling mode.
        <br>Values: <code>TRUE</code>, <code>FALSE</code>.
        <br>Default: <code>TRUE</code>.
        <br>Updating from <code>TRUE</code> to <code>FALSE</code> is not recommended.
        <br>Must be set to <code>FALSE</code> before activating transparent mode load balancing via annotations in NCP. 
        Transparent mode load balancing also requires a single-tier NSX Policy API topology. 
        For additional transparent mode requirements, see [Limitations](https://docs.vmware.com/en/VMware-NSX-Container-Plugin/4.1.0/rn/vmware-nsx-container-plugin-410-release-notes/index.html#Limitations) 
        in <i>VMware NSX Container Plugin 4.1.0 Release Notes</i> in the NCP documentation.
        <br>Requires NCP v4.0.0 or later.</td></tr>
<tr><td>ncp.nsx_v3.members_per_medium_lbs</td><td>Integer</td>
    <td><strong>Policy Only</strong>
        <br>Limit for medium load balancer.
        <br>Default: <code>2000</code>.
        <br>Requires NCP v4.0.1 or later.</td></tr>
<tr><td>ncp.nsx_v3.members_per_small_lbs</td><td>Integer</td>
    <td><strong>Policy Only</strong>
        <br>Limit for small load balancer.
        <br>Default: <code>2000</code>.
        <br>Requires NCP v4.0.1 or later.</td></tr>
<tr><td>ncp.nsx_v3.natfirewallmatch</td><td>String List</td>
    <td><strong>Policy Only</strong>
        <br>How firewall is applied to a traffic packet coming through NAT.
        <br>Values: <code>BYPASS</code>, <code>MATCH_EXTERNAL_ADDRESS</code>, <code>MATCH_INTERNAL_ADDRESS</code>.
        <br>Default: <code>MATCH_INTERNAL_ADDRESS</code>.
        <br>Requires NCP v4.0.1 or later.</td></tr>
<tr><td>ncp.nsx_v3.ncp_enforced_pool_member_limit</td><td>String List</td>
    <td><strong>Policy Only</strong>
        <br>Strategy for limiting pool members when scale validation is relaxed.
        <br>Values: <code>ACTIVATE</code>, <code>CRD_LB_ONLY</code>, <code>DEACTIVATE</code>.
        <br>Default: <code>DEACTIVATE</code>.
        <br>Requires NCP v4.0.1 or later.</td></tr>
<tr><td>ncp.nsx_v3.relax_scale_validation</td><td>String<br><strong>Updatable</strong></td>
    <td><strong>Policy Only</strong>
        <br>Suspend validation of the number of load balancer pools and virtual servers.
        <br>Values: <code>TRUE</code>, <code>FALSE</code>.
        <br>Default: <code>FALSE</code>.
        <br>Requires NCP v4.0.1 or later.</td></tr>     
<tr><td>ncp.nsx_v3.retries</td><td>Integer<br><strong>Updatable</strong></td><td>Maximum number of times to retry API requests upon stale revision errors.
    <br>Default: <code>10</code></td></tr>
<tr><td>ncp.nsx_v3.snat_rule_logging</td><td>String<br><strong>Updatable</strong></td>
    <td>Enable logging for snat rule.
    <br>Values: none, <code>basic</code>, <code>extended</code>.<br>Default: none.</td></tr>
<tr><td>nsx_node_agent.connect_retry_timeout</td><td>Integer<br><strong>Updatable</strong></td>
    <td>The time in seconds for <code>nsx_node_agent</code> to recover the Hyperbus connection.
    <br>Default: <code>220</code>.</td></tr>
</table>

<p class="note"><strong>Note:</strong> On an existing cluster, you can modify 
    only the network profile parameters that are labeled <b>Updatable</b>.
</p>

<br>
### <a id="parameter-descriptions"></a> Parameter Descriptions

The following describes commonly used network profile parameters:  

#### <a id="parameter-client-ssl-profile"></a>client\_ssl\_profile

The primary use case for updating the network profile `client_ssl_profile` field
is to configure which NSX-T client-side ssl profile is to be used by NCP.  

You can change the `client_ssl_profile` parameter to a valid NSX-T client-side ssl profile ID.  

Configure `client_ssl_profile` in the `cni_configurations` parameters section of your network profile.  

If `client_ssl_profile` is blank or incorrect, the default NCP client SSL profile value is used instead:  

* In Management API mode the default is `nsx-default-client-ssl-profile`.  
* In Policy API mode the default is `default-balanced-client-ssl-profile`.  

Both of these default NCP client SSL profiles use balanced-level pre-defined ciphers.  


#### <a id="parameter-enable-hostport"></a>enable\_hostport

The primary use case for updating the network profile `enable_hostport` field 
is to activate or deactivate NCP support for Kubernetes Host Port.  

You can change the `enable_hostport` parameter to either `true` or `false`. 
Configure `enable_hostport` in the `cni_configurations` parameters section of your network profile.  

The Kubernetes Host Port feature allows you to expose an application to be externally accessible through a single port from outside of your cluster. 
For more information on Host Port, see 
[Pod Security Policies](https://kubernetes.io/docs/concepts/policy/pod-security-policy) 
in the Kubernetes documentation.  

#### <a id="parameter-enable-nodelocaldns"></a>enable\_nodelocaldns

The primary use case for updating the network profile `enable_nodelocaldns` field 
is to activate or deactivate NCP support for Kubernetes NodeLocal DNSCache.  

You can change the `enable_nodelocaldns` parameter to either `true` or `false`. 
Configure `enable_nodelocaldns` in the `cni_configurations` parameters section of your network profile.  

NodeLocal DNSCache improves cluster DNS performance by running a dns caching agent on cluster nodes as a DaemonSet. 
For more information on NodeLocal DNSCache, see 
[Using NodeLocal DNSCache in Kubernetes clusters](https://kubernetes.io/docs/tasks/administer-cluster/nodelocaldns/) 
in the Kubernetes documentation.  

#### <a id="extensions"></a>extensions

The primary use case for configuring the network profile CNI configuration `extensions` field 
is to configure the less commonly configured NCP and NSX Node Agent settings.  

Use the network profiles `extensions` field to configure an NCP ConfigMap or NSX Node Agent ConfigMap property 
that is applicable to <%= vars.k8s_runtime_abbr %> but is not explicitly supported as a `cni_configurations` parameter.  

NCP and NSX Node Agent settings supported as explicit Network Profiles parameters cannot be configured through extensions.  

For more information, see [cni_configurations Extensions Parameters](#cni-extensions) above.  


#### <a id="parameter-fip-pool-ids"></a>fip\_pool\_ids

The primary use case for updating the network profile `fip_pool_ids` field 
is to add additional NSX-T floating IP pool UUIDs, for a cluster or load balancer, to a cluster.  

To add NSX-T floating IP pool UUIDs to a cluster:  

* If creating a new cluster:  

    * To use only the default floating IP Pool, leave the `fip_pool_ids` field empty or
    add the UUID for the default floating IP Pool to the `fip_pool_ids` field.  
    * To use both the default and your defined floating IP Pools, 
    add the UUIDs for both to the network profile `fip_pool_ids` field.  
    * To replace the default floating IP Pool with your defined floating IP Pool, 
    add only the UUIDs for your defined floating IP Pools to the network profile `fip_pool_ids` field.

* If adding a `fip_pool_ids` parameter array to the network profile of an existing cluster:  

    * You must include the UUID of the default floating IP pool in your `fip_pool_ids` parameter array.  

* If modifying an existing `fip_pool_ids` parameter array on the network profile of an existing cluster:  

    * You can add more floating IP Pool UUIDs to the array.
    * You can reorder the floating IP Pool UUIDs in the array.
    * You cannot remove any of the floating IP Pool UUIDs from an existing `fip_pool_ids` parameter array. 
    For example, do not create a copy of a network profile, remove `fip_pool_ids` array values, 
    and assign the new profile to the cluster that has the original profile assigned.  

<p class="note"><strong>Note</strong>: <%= vars.k8s_runtime_abbr %> allocates IP Addresses from the start of the floating IP pool range. 
    To avoid conflicts with internal <%= vars.k8s_runtime_abbr %> functions, always use IP addresses from the end of the floating IP pool. For more information, see 
    <a href="troubleshoot-issues.html#fip-ip-reuse">Failed to Allocate FIP from Pool</a> in <em>General Troubleshooting</em>.
</p>

For information on modifying a network profile `fip_pool_ids` field, 
see [Customize Floating IP Pools](./network-profiles-fip.html).
For more information on the `fip_pool_ids` field, see [Network Profile Parameters](./network-profiles-define.html#params) above.  



#### <a id="parameter-lb-connection-multiplexing-enabled"></a>lb\_connection\_multiplexing\_enabled

The primary use case for updating the network profile `lb_connection_multiplexing_enabled` field
is to enable NSX-T load balancer TCP multiplexing.  

You can change the `lb_connection_multiplexing_enabled` parameter to either `true` or `false`.  

Configure `lb_connection_multiplexing_enabled` in the `cni_configurations` parameters section of your network profile.  

#### <a id="parameter-lb-connection-multiplexing-number"></a>lb\_connection\_multiplexing\_number

The primary use case for updating the network profile `lb_connection_multiplexing_number` field
is to configure the maximum number of NSX-T load balancer TCP multiplexing connections.  

You can change the `lb_connection_multiplexing_number` parameter to an integer value.  

Configure `lb_connection_multiplexing_number` in the `cni_configurations` parameters section of your network profile.  


#### <a id="parameter-nodes-dns"></a>nodes\_dns

The primary use case for updating the network profile `nodes_dns` field 
is to update the DNS server configuration for a cluster.  

You can configure the network profile `nodes_dns` field to add, modify or remove IP addresses from a cluster DNS server configuration. 
For more information on the network profile `nodes_dns` field and an example of a `nodes_dns` configuration, 
see [Specify Nodes DNS Servers](./network-profiles-nodes-dns.html).  

<p class="note"><strong>Note:</strong> If you modify a DNS server configuration, 
do not exceed the maximum of three DNS server IP addresses.
</p>

#### <a id="parameter-pod-ip-block-ids"></a>pod\_ip\_block\_ids

The primary use case for updating the network profile `pod_ip_block_ids` field 
is to add additional IP addresses for pods when a cluster is at or near the point exhausting all available public IP addresses 
for pods.  

You can change the `pod_ip_block_ids` parameter array as follows:

* Add more IP Block IDs to the array.
* Reorder the IP Block IDs in the array.

You cannot remove any of the IP Block IDs from an existing `pod_ip_block_ids` parameter array. 
Do not create a copy of a network profile, remove `pod_ip_block_ids` array values, 
and assign the new profile to a cluster that has the original profile assigned.   

For more information on modifying a network profile `pod_ip_block_ids` field, 
see [Add Pod IPs](./network-profiles-pods.html#pods-ips-add) in _Customizing Pod Networks_.
For more information on the `pod_ip_block_ids` field, see [Network Profile Parameters](./network-profiles-define.html#params) above.  

<br>
### <a id='use-cases'></a> Network Profile Use Cases

Network profiles let you customize configuration parameters for 
Kubernetes clusters provisioned by <%= vars.k8s_runtime_abbr %> on vSphere with NSX&#8209;T.  

You can apply a network profile to a Kubernetes cluster for the following scenarios:

<%= partial 'network-profiles-uses' %>