---
title: Configuring Cluster Access to Private Registries
owner: TKGI
---

This topic describes how to configure VMware Tanzu Kubernetes Grid Integrated Edition (TKGI) Kubernetes clusters to access private Docker or containerd registries that are secured by SSL Certificate Authority (CA) certificates.

<br>
## <a id="overview"></a><a id="configure-for-docker"></a>Overview

You can store images for TKGI in private registries that are secured with SSL CA certificates.

To enable new and existing TKGI Kubernetes clusters to access the private registries, you configure them with the local registry addresses and the SSL CA certificates needed to authenticate with the registries.

<p class="note"><strong>Note:</strong> Only Linux clusters can be configured to use private registries.
</p>

To create a new cluster configured to use private registries:

1. [Set up Your API Access Token](#set-token)
1. [Create a Cluster with Private Registry Access](#create-cluster)

To update an existing cluster to use private registries:

1. [Set up Your API Access Token](#set-token)
1. [Update a Cluster with Private Registry Access](#update-cluster)

<p class="note"><strong>Note:</strong> The procedures documented in this topic configure an individual
  TKGI Kubernetes cluster with SSL CA certificates.
  See <a href="https://docs.vmware.com/en/VMware-Harbor-Registry/services/vmware-harbor-registry/GUID-integrating-pks.html#provide-harbor-cert">
  Import the CA Certificate Used to Sign the Harbor Certificate and Key to BOSH</a> in
  <i>Integrating VMware Harbor Registry with Tanzu Kubernetes Grid Integrated Edition</i> if you want to
  apply a single Harbor Registry certificate to all of your TKGI clusters.
</p>


<br>
<br>
## <a id='prerequisites'></a> Prerequisites

Before configuring TKGI Kubernetes clusters to access private registries, you must have the following:

* A private registry secured with SSL CA certificates.
For more information about securing a private Docker registry, see 
[Use self-signed certificates](https://docs.docker.com/registry/insecure/#use-self-signed-certificates)
in the _Docker Registry_ manual.

<p class="note warning"><strong>Warning: </strong> The FQDN for the private registry cannot contain a hyphen, dash, or semicolon.
  If such a character is included in the registry name the TKGI API will reject it as not a valid character.
</p>

<br>
<br>
## <a id='set-token'></a> Set up Your API Access Token

The `curl` commands in this topic use an access token environment variable to
authenticate to the TKGI API endpoints.

<%= partial 'create-auth-token-var' %>

<br>
<br>
## <a id='create-cluster'></a> Create a Cluster with Private Registry Access

You can create a new cluster configured with one or more SSL CA certificates by
using the TKGI API `create-cluster` endpoint.

1. To create a cluster configured with one or more SSL CA certificates, run the following command:

    ```
    curl -X POST \
      https://TKGI-API:9021/v1/clusters \
      -H 'Accept: application/json' \
      -H "Authorization: Bearer $YOUR-ACCESS-TOKEN" \
      -H 'Content-Type: application/json' \
      -H 'Host: TKGI-API:9021' \
      -d '{
      "name": "CLUSTER-NAME",
      "plan_name": "PLAN-NAME",
      "parameters": {
        "kubernetes_master_host": "KUBERNETES-CONTROLPLANE-HOST",
        "k8s_customization_parameters": {
          "insecure_registries": ["DOMAIN-NAME"],
          "unset_http_proxy": ["runtime", "kube-apiserver"]
        },
        "custom_ca_certs": [
          {
            "domain_name": "DOMAIN-NAME",
            "ca_cert": "CA-CERTIFICATE"
          }
        ]
      }
    }'
    ```
    Where:  

    * `TKGI-API` is the FQDN of your TKGI API endpoint. For example, `api.tkgi.example.com`.  
    * `YOUR-ACCESS-TOKEN` is the name of your access token environment variable.  
    * `CLUSTER-NAME` is the name of your cluster.  
        <p class="note"><strong>Note</strong>: Use only lowercase characters when naming your cluster 
        if you manage your clusters with Tanzu Mission Control (TMC). Clusters with names that include an uppercase character cannot be attached to TMC.
        </p>
    * `PLAN-NAME` is the name of your plan.
    * `KUBERNETES-CONTROLPLANE-HOST` is your Kubernetes control plane host.  
    * `DOMAIN-NAME` is the address of the private registry, for example `registry.tkgi.local` or `10.148.253.20`.

        - You cannot remove an existing Docker Registry URL from a cluster.
        If you specify a URL that is already registered with your cluster, the cluster's existing CA certificate for that URL is overwritten.
    * `CA-CERTIFICATE` is the CA certificate for the registry at `DOMAIN-NAME`.
    For more information about including CA certificates in a TKGI API command, see
    [Prepare a Certificate String for Command Line Use](#preparing-certificate), below.  
    <br>
    To configure your cluster with additional registries, add them to the `insecure_registries` list and include their certificates in
    the <code>custom_ca_certs</code> array as additional <code>domain_name</code>,
    <code>ca_cert</code> pairs.
    <p class="note"><strong>Note:</strong> You can include wildcard characters in your
    <code>domain_name</code> URLs. For example, <code>*.docker.com</code>.
    </p>

<br>
<br>
## <a id='update-cluster'></a> Update a Cluster with Private Registry Access

You can update an existing cluster with one or more SSL CA certificates by using the TKGI API `update-cluster` endpoint.

1. To configure an existing cluster with one or more SSL CA certificates, run the following command:

    ```
    curl -X PATCH \
      https://TKGI-API:9021/v1/clusters/CLUSTER-NAME \
      -H 'Accept: application/json' \
      -H "Authorization: Bearer $YOUR-ACCESS-TOKEN" \
      -H 'Content-Type: application/json' \
      -H 'Host: TKGI-API:9021' \
      -d '{
            "k8s_customization_parameters": {
              "insecure_registries": ["DOMAIN-NAME"],
              "unset_http_proxy": ["runtime", "kube-apiserver"]
            },
            "custom_ca_certs": [
              {
                "domain_name": "DOMAIN-NAME",
                "ca_cert": "CA-CERTIFICATE"
              }
            ]
          }'
    ```
    Where:  

    * `TKGI-API` is the FQDN of your TKGI API endpoint. For example, `api.tkgi.example.com`.
    * `YOUR-ACCESS-TOKEN` is the name of your access token environment variable.  
    * `CLUSTER-NAME` is the name of your cluster.
    * `DOMAIN-NAME` is the address of the private registry, for example `registry.tkgi.local` or `10.148.253.20`.

        - You cannot remove an existing Docker Registry URL from a cluster.
        If you specify a URL that is already registered with your cluster, the cluster's existing CA certificate for that URL is overwritten.
    * `CA-CERTIFICATE` is the CA certificate for the registry at `DOMAIN-NAME`.
    For more information about including CA certificates in a TKGI API command, see
    [Prepare a Certificate String for Command Line Use](#preparing-certificate), below.  
    <br>
    To configure your cluster with additional registries, add them to the `insecure_registries` list and include their certificates in
    the <code>custom_ca_certs</code> array as additional <code>domain_name</code>,
    <code>ca_cert</code> pairs.
    <p class="note"><strong>Note:</strong> You can include wildcard characters in your
    <code>domain_name</code> URLs. For example, <code>*.docker.com</code>.
    </p>

<br>
<br>
## <a id='preparing-certificate'></a> Prepare a Certificate String for Command Line Use

When you provide a certificate string on a command line or TKGI API command, as in the TKGI API commands above, 
your certificate string must be provided without newline wrapping.  

For information on certificate string formatting, see [SSL CA Certificate Formats](#certificate-formats) below.  

<p class="note"><strong>Note:</strong> The TKGI API does not validate certificate strings for correctness. 
  Ensure your certificate string is free of newline characters before using the certificate string in a TKGI API command.
</p>

To prepare your certificate string for command line use: 

1. To remove newline wrapping from a certificate string, run the following command:  

    ```
    awk 'NF {sub(/\r/, ""); printf "%s\\\\n",$0;}'  CA-PEM
    ```

    Where `CA-PEM` is the filename of your PEM-formatted CA certificate file.  
<br>
    This command returns your certificate string without newline wrapping.   


<br>
### <a id='certificate-formats'></a> SSL CA Certificate Formats

SSL CA certificates are unique CA-issued ASCII text strings.  

The CAs issue most certificates as a PEM formatted ASCII text files. 
PEM certificate files typically have the extensions `.pem`, `.crt`, `.cer`, or `.key`.  

PEM files start with the string `-----BEGIN CERTIFICATE-----`, terminate with `-----END CERTIFICATE-----`, 
and are Base64-encoded. 
Certificate strings are long and are frequently stored within a certificate file with newline wrapping every 64 characters.
