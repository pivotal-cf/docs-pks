---
title: Troubleshooting
owner: PKS
---

<strong><%= modified_date %></strong>

##<a id='api-timeout'></a>PKS API is Slow or Times Out

**Symptom**

When you run PKS CLI commands, the PKS API times out or is slow to respond.

**Explanation**

The PKS API control plane VM requires more resources.

**Solution**

1. Navigate to `https://YOUR-OPS-MANAGER-FQDN/` in a browser to log in to the Ops Manager Installation Dashboard.

1. Select the **Pivotal Container Service** tile.

1. Select the **Resource Config** page.

1. For the **Pivotal Container Service** job, select a **VM Type** with greater CPU and memory resources.

1. Click **Save**.

1. Click the **Installation Dashboard** link to return to the Installation Dashboard.

1. Click **Apply Changes**.

<hr>

##<a id='cluster-create-fail'></a>Cluster Creation Fails

**Symptom**

When creating a cluster, you run `pks cluster CLUSTER-NAME` to monitor the cluster creation status.
In the command output, the value for **Last Action State** is `error`.

**Explanation**

There was an error creating the cluster.

**Diagnostics**

1. Log in to the BOSH Director and run `bosh tasks`.
  The output from `bosh tasks` provides details about the tasks that the BOSH Director has run.
  See [Manage PKS Deployments with BOSH](manage-deployments-bosh.html) for more information about logging in to the BOSH Director.

1. In the BOSH command output, locate the task that attempted to create the cluster.

1. Find more information about the task by running `bosh -e MY-ENVIRONMENT tasks TASK-NUMBER`.
  For example:
  <pre class="terminal">$ bosh -e pks tasks 23</pre>

See the [BOSH documentation](https://bosh.io/docs/cli-v2#task-mgmt) for more information about troubleshooting failed BOSH tasks.

<hr>

##<a id="timeouts"></a>Cannot Access Add-On Features or Functions

**Symptom**

You cannot access a feature or function provided by a Kubernetes add-on.

Examples include the following:  

- You cannot access the Kubernetes [Web UI (Dashboard)](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/) in a browser or using the kubectl command-line tool.
- [Heapster](https://github.com/kubernetes/heapster) does not start.
- Pods cannot resolve DNS names, and error messages report the service `kube-dns` is invalid. If `kube-dns` is not deployed, the cluster typically fails to start.

**Explanation**

The Kubernetes features and functions listed above are provided by the following PKS add-ons: 

* **Kubernetes Dashboard** `kubernetes-dashboard`
* **Heapster**: `heapster`
* **DNS Resolution**: `kube-dns`

To enable these add-ons, Ops Manager must run scripts after deploying PKS. You must configure Ops Manager to automatically run these post-deploy scripts.

**Solution**

Perform the following steps to configure Ops Manager to run post-deploy scripts to deploy the missing add-ons to your cluster.

1. Navigate to `https://YOUR-OPS-MANAGER-FQDN/` in a browser to log in to the Ops Manager Installation Dashboard.

1. Click the Ops Manager v2.1 tile.

1. Select **Director Config**.

1. Select **Enable Post Deploy Scripts**.
  <p class="note"><strong>Note</strong>: This setting enables post-deploy scripts for all tiles in your Ops Manager installation.</p>

1. Click **Save**.

1. Click the **Installation Dashboard** link to return to the Installation Dashboard.

1. Click **Apply Changes**.

1. After Ops Manager finishes applying changes, enter `pks delete-cluster` on the command line to delete the cluster. For more information, see the [Delete a Cluster](delete-cluster.html) section of _Using PKS_.

1. On the command line, enter `pks create-cluster` to recreate the cluster. For more information, see the [Create a Cluster](create-cluster.html) section of the _Using PKS_.

<hr>

##<a id='bosh-pks-map'></a>Error: Failed Jobs

**Symptom**

In stdout or log files, you see an error message referencing `post-start scripts failed` or `Failed Jobs`.

**Explanation**

After deploying PKS, Ops Manager runs scripts to start a number of jobs. You must configure Ops Manager to automatically run these post-deploy scripts.

**Solution**

Perform the following steps to configure Ops Manager to run post-deploy scripts. 

1. Navigate to `https://YOUR-OPS-MANAGER-FQDN/` in a browser to log in to the Ops Manager Installation Dashboard.

1. Click the Ops Manager v2.1 tile.

1. Select **Director Config**.

1. Select **Enable Post Deploy Scripts**.
  <p class="note"><strong>Note</strong>: This setting enables post-deploy scripts for all tiles in your Ops Manager installation.</p>

1. Click **Save**.

1. Click the **Installation Dashboard** link to return to the Installation Dashboard.

1. Click **Apply Changes**.

1. After Ops Manager finishes applying changes, enter `pks delete-cluster` on the command line to delete the cluster. For more information, see the [Delete a Cluster](delete-cluster.html) section of _Using PKS_.

1. On the command line, enter `pks create-cluster` to recreate the cluster. For more information, see the [Create a Cluster](create-cluster.html) section of _Using PKS_.

<hr>

##<a id='no-such-host'></a>Error: No Such Host

**Symptom**

In stdout or log files, you see an error message that includes `lookup vm-WORKER-NODE-GUID on IP-ADDRESS: no such host`.

**Explanation**

This error occurs on GCP when the Ops Manager Director tile uses 8.8.8.8 as the DNS server.
When this IP range is in use, the master node cannot locate the route to the worker nodes.

**Solution**

Use the Google internal DNS range, 169.254.169.254, as the DNS server.

<hr>

##<a id='storage'></a>Error: FailedMount

**Symptom**

In Kubernetes log files, you see a `Warning` event from kubelet with `FailedMount` as the reason.

**Explanation**

A persistent volume fails to connect to the Kubernetes cluster worker VM.

**Diagnostics**

* In your cloud provider console, verify that volumes are being created and attached to nodes.
* From the Kubernetes cluster master node, check the controller manager logs for errors attaching persistent volumes.
* From the Kubernetes cluster worker node, check kubelet for errors attaching persistent volumes.

##<a id='vsphere-ha-permissions'></a>Resurrecting VMs Causes Incorrect Permissions in vSphere HA

**Symptoms**

Output resulting from the `bosh vms` command alternates between showing that the VMs are `failing` and showing that the VMs are `running`. The operator must run the `bosh vms` command multiple times to see this cycle.

**Explanation**

The VMs' permissions are altered during the restarting of the VM so operators have to reset permissions every time the VM reboots or is redeployed.

VMs cannot be successfully resurrected if the resurrection state of your VM is set to `off` or if the the vSphere HA restarts the VM before BOSH is aware that the VM is down.
For more information on VM resurrection, see [Resurrection](https://bosh.io/docs/sysadmin-commands/#vm-resurrection) in the Cloud Foundry BOSH documentation.

**Solution**

Run the following command on all of your master and worker VMs:

`bosh -environment BOSH-DIRECTOR-NAME -deployment DEPLOYMENT-NAME ssh INSTANCE-GROUP-NAME -c "sudo /var/vcap/jobs/kube-controller-manager/bin/pre-start; sudo /var/vcap/jobs/kube-apiserver/bin/post-start"`

Where:

+ `BOSH-DIRECTOR-NAME` is your BOSH Director name.
+ `DEPLOYMENT-NAME` is the name of your BOSH deployment.
+ `INSTANCE-GROUP-NAME` is the name of the BOSH instance group you are referencing.

The above command, when applied to each VM, gives your VMs the correct permissions.

##<a id='upgrade-drain-hangs'></a>Upgrade of cluster hangs due to drain unable to complete

**Symptoms**

During the upgrade process the upgrade of a worker node may hang indefinitely.

**Explanation**

As part of the upgrade process the workers are cordoned and drained. This drain waits on Kubernetes to unschedule all pods. If Kubernetes is unable to unschedule a pod then the drain will hang indefinitely.
One reason why Kubernetes may be unable to unschedule the node is if the `PodDisruptionBudgets` has been configured to have 0 allowed disruptions and only a single instance of the pod has been scheduled. 

**Solution**

When using `PodDisruptionBudgets` ensure that the allowed disruptions allow for the node to be removed from the cluster. See the note on how to [maintain workload uptime](upgrade-pks.html#prepare) also see [How Disruption Budgets Work](https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#how-disruption-budgets-work)




