---
title: Configure the HTTP/S Layer 7 Ingress Controller
owner: TKGI
lbtype: layer7controller
---

This topic describes how to define network profiles for Kubernetes clusters provisioned with <%= vars.product_full %> on vSphere with NSX-T.

## <a id='ncp-ingress-about'></a><a id='overview'></a> Overview

<%= partial 'nsx-t-ingress-lb-overview' %>

## <a id='ncp-ingress-about'></a> Configure the HTTP/HTTPS Ingress Controller Network Profile

The HTTP/HTTPS layer 7 virtual servers provisioned for each Kubernetes service 
are controlled by the parameters exposed in a network profile.  

#### <a id='ncp-params'></a> NSX-T HTTP/HTTPS Ingress Controller Network Profile Configuration

The NSX Ingress Controller is configured using the `ncp.ini` network profile configuration file.  

The HTTP/HTTPS Ingress Controller network profile has the following format:

```
{
  "name": "ncp_network_profile",
  "description": "DESCRIP",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "nsx_lb": NSX-LB,   
           "nsx_ingress_controller": NCP-IC,        
           "ingress_ip": "IP-ADDRESS",
           "ingress_persistence_settings": {
             "persistence_type": "PERS-TYPE",
             "persistence_timeout": TIMEOUT 
             }
           }
      }
    }
}
```

Where: 

* `DESCRIP` is your description for this network profile configuration.  
* `NSX-LB` is your preference for whether the NSX-T Load Balancer is used for your Kubernetes clusters. 
For more information see [Configure the NSX Ingress Controller](#nsx_ingress_controller), below.  
* `NCP-IC` is your preference for whether the NCP is used as the Ingress Controller for your Kubernetes clusters.  
* `IP-ADDRESS` is IP address to use for ingress controller load balancer.
For more information see [Configure the Ingress IP](#ingress_ip), below.  
* `PERS-TYPE` is the persistence type to use for ingress controller load balancer.
For more information see [Configure the Ingress Persistence Settings](#ingress_persistence_settings), below.  
* `TIMEOUT` is the persistence timeout to use for ingress controller load balancer.  
For more information see [Configure the Ingress Persistence Settings](#ingress_persistence_settings), below.

<a id='ingress-example'></a>For example:

```
{
  "name": "ncp_network_profile",
  "description": "Example network profile for ingress controller",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "nsx_lb": true,  
           "nsx_ingress_controller": false,        
           "ingress_ip": "192.168.160.212",
           "ingress_persistence_settings": {
             "persistence_type": "cookie",
             "persistence_timeout": 1 
             }
           }
      }
    }
}
```

<%= partial 'ic-network-profile' %> 

#### <a id='nsx_ingress_controller'></a> Configure the NSX Ingress Controller

NCP depends on the NSX-T Load Balancer to fulfill its role as an Ingress Controller. 
To use a third-party ingress controller, such as the [NGINX Ingress Controller](https://kubernetes.github.io/ingress-nginx/), 
set the `nsx_ingress_controller` to `false`. 

For example:

* The following network profile uses the NSX-T Load Balancer and a third-party ingress controller:

    ```
    {
      "name": "example_network_profile",
      "description": "Use the nsx_lb with a 3rd party ingress controller",
      "parameters": {
        "cni_configurations": {
          "type": "nsxt",
          "parameters": {
             "nsx_lb": true,
             "nsx_ingress_controller": false
          }
        }
      }
    }
    ```

* The following network profile uses a third party load balancer and a third-party ingress controller:

    ```
    {
      "name": "example_network_profile",
      "description": "Use the nsx_lb with a 3rd party ingress controller",
      "parameters": {
        "cni_configurations": {
          "type": "nsxt",
          "parameters": {
             "nsx_lb": false,
             "nsx_ingress_controller": false
          }
        }
      }
    }
    ```

You should not disable `nsx_lb` and use the NCP Ingress Controller. Using the NCP Ingress Controller with `nsx_lb` disabled is invalid.

For example, the following is invalid:

```
{
  "name": "example_network_profile",
  "description": "Use the nsx_lb with a 3rd party ingress controller",
  "parameters": {
    "cni_configurations": {
      "type": "nsxt",
      "parameters": {
         "nsx_lb": false,
         "nsx_ingress_controller": true
      }
    }
  }
}
```

#### <a id='ingress_ip'></a> Configure the Ingress IP

The `ingress_ip` parameter instructs NCP to create an ingress virtual server with the given IP address.

The `ingress_ip` parameter type is a string that accepts any valid IP address. Missing entry is accepted.

Example network profile for `ingress_ip`:

```
{
  "name": "example-network-profile",
  "description": "ingress_ip",
  "parameters" : {
     "cni_configurations": {
         "type": "nsxt",
         "parameters": {
           "ingress_ip": "192.168.160.212"
         }
     }
  }
}
```

An invalid IP address is rejected with an invalid parameter value error.  

For example:

* The following network profile parameters cannot be parsed because the `"ingress_ip"` 
configuration specifies an invalid IP address:

    ```
    {
      "name": "example-network-profile",
      "description": "ingress_ip-ERROR",
      "parameters" : {
         "cni_configurations": {
             "type": "nsxt",
             "parameters": {
               "ingress_ip": "192.168.460.212"
             }
         }
      }
    }
    ```

* The following network profile cannot be parsed because the `"ingress_ip"` 
configuration is not a string and the JSON input is invalid:

    ```
    {
      "name": "example-network-profile",
      "description": "ingress_ip-ERROR",
      "parameters" : {
         "cni_configurations": {
             "type": "nsxt",
             "parameters": {
               "ingress_ip": 192.168.160.212
             }
         }
      }
    }
    ```

#### <a id='ingress_persistence_settings'></a> Configure the Ingress Persistence Settings

The `ingress_persistence` parameter lets you customize layer 7 persistence for Kubernetes services.

The `ingress_persistence_settings` parameter is a map that supports two keys:

* `persistence_type`  
* `persistence_timeout`

These two keys are correlated and must be set/unset at the same time. 
If `persistence_type` and `persistence_timeout` are not both specified, the network profile fails validation.

  <table>
    <th width="30%">Parameter</th>
    <th>Data Type</th>
    <th>Description</th>
    <tr>
      <td><code>persistence\_type</code></td>
      <td>String</td>
      <td>Valid values are <code>cookie</code> or <code>source_ip</code>. An empty value is not accepted.</td>
    </tr>
    <tr>
      <td><code>persistence\_timeout</code></td>
      <td>Integer</td>
      <td>Value that is equal to <code>1</code> or larger. Empty value is not accepted.</td>
    </tr>
  </table>

For example:

* Network profile for `ingress_persistence_settings`:

    ```
    {
      "name": "example_network_profile",
      "description": "ingress_persistence_settings",
      "parameters" : {
         "cni_configurations": {
             "type": "nsxt",
             "parameters": {
               "ingress_ip": "192.168.160.212"       
               "ingress_persistence_settings": {
                 "persistence_type": "cookie",
                 "persistence_timeout": 1
                }
             }
         }
      }
    }
    ```

* Network profile for `ingress_persistence_settings`:

    ```
    {
      "name": "example_network_profile",
      "description": "ingress_persistence_settings",
      "parameters" : {
         "cni_configurations": {
             "type": "nsxt",
             "parameters": {
               "ingress_ip": "192.168.160.212"         
               "ingress_persistence_settings": {
                 "persistence_type": "source_ip",
                 "persistence_timeout": 100
                }
             }
         }
      }
    }
    ```
