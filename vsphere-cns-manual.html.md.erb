---
title: Manually Installing the vSphere CSI Driver
owner: TKGI
---

This topic explains how to manually integrate Cloud Native Storage (CNS) with <%= vars.product_full %> on vSphere using the vSphere Container Storage Interface (CSI) driver.
This integration enables <%= vars.k8s_runtime_abbr %> clusters to use external container storage.

This topic provides procedures for installing CSI on a TKGI cluster, verifying the installation and resizing PersistentVolumes.

<p class="note"><strong>Note:</strong> CSI can only be installed on a Linux <%= vars.k8s_runtime_abbr %> cluster.</p>

## <a id='overview'></a>Overview

Cloud Native Storage (CNS) provides comprehensive data management for stateful, containerized apps,
enabling apps to survive restarts and outages.
Stateful containers can use vSphere storage primitives such as standard volume, PersistentVolume, and dynamic provisioning, independent of VM and container lifecycle.

vSphere storage backs the volumes, and you can set a storage policy directly on the volumes.
After you create the volumes, you can use the vSphere client to review the volumes and their backing virtual disks, and monitor their storage policy compliance.  

For more information, see [Getting Started with VMware Cloud Native Storage](https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.storage.doc/GUID-CF1D7196-E49C-4430-8C50-F8E35CAAE060.html).  

To create PersistentVolumes using CNS on vSphere, see:  

* [Prerequisites for using the vSphere CSI Driver with <%= vars.k8s_runtime_abbr %>](#prereq)  
* [Install the vSphere CSI Driver on a <%= vars.k8s_runtime_abbr %> Cluster](#manual)  
* [Create a vSphere Storage Class](#create-storage)  

<br>
To resize a PersistentVolume, see:  

* [Resize a PersistentVolume](#resize-pv)

<br>
To upgrade the vSphere CSI driver, see:  

* [Upgrade the vSphere CSI Driver on a <%= vars.k8s_runtime_abbr %> Cluster](#manual-upgrade)

### <a id='supported-feature'></a> vSphere CSI Driver Supported Features and Requirements

The vSphere CSI Driver supports different features depending on driver version, environment and storage type.  

<%= vars.k8s_runtime_abbr %> supports only the following vSphere CSI Driver features:  

* Enhanced Object Health in UI for vSAN Datastores  
* Dynamic Block PV support<sup>&#42;</sup>  
* Dynamic Virtual Volume (vVOL) PV support  
* Static PV Provisioning  
* Kubernetes Multi-node Control Plane support  
* Encryption support via VMcrypt<sup>&#42;</sup>  
* Dynamic File PV support<sup>&#42;</sup>  
<br>

    <sup>&#42;</sup>For information on the usage limitations and environment and version requirements of these vSphere CSI Driver features, 
    see [Functionality Supported by vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-E59B13F5-6F49-4619-9877-DF710C365A1E.html#functionality-supported-by-vsphere-container-storage-plugin-0) 
    in _Supported Kubernetes Functionality and Limitations_ in the VMware vSphere Container Storage Plug-in documentation.  

<br>
For information on the vCenter, datastore, and cluster types supported by the vSphere CSI Driver, see 
[vSphere Functionality Supported by vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-5B7955AA-E720-4C73-8330-1C34A0B054B3.html) 
 in the VMware vSphere Container Storage Plug-in documentation.  

For information on the scaling limitations of the vSphere CSI Driver, see 
[Configuration Maximums for vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-C0350554-F5DB-4C27-9786-720AC0F0B28A.html) 
 in the VMware vSphere Container Storage Plug-in documentation.  


## <a id='prereq'></a>Prerequisites for Using the vSphere CSI Driver with <%= vars.k8s_runtime_abbr %>

Before you use the vSphere CSI Driver, your environment must meet the following requirements:

* A Linux <%= vars.k8s_runtime_abbr %> cluster. CSI on a Windows <%= vars.k8s_runtime_abbr %> cluster is not supported.
* **The vSphere CSI Driver must be a compatible version:** The vSphere CSI Driver you use must be compatible with the Kubernetes version installed with <%= vars.k8s_runtime_abbr %>. 
For more information see [Compatibility Matrix for vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-D4AAD99E-9128-40CE-B89C-AD451DA8379D.html) 
in the vSphere CSI Driver documentation.  
    <p class="note"><strong>Note:</strong> VMware recommends using vSphere CSI Driver v2.4 or later with <%= vars.k8s_runtime_abbr %> v1.13.
    </p>
    For instructions on how to upgrade the vSphere CSI Driver version, see 
    [Upgrade the vSphere CSI Driver on a <%= vars.k8s_runtime_abbr %> Cluster](#manual-upgrade) below.  
* **The vSphere CSI Driver requirements have been met:** For more information, see 
[Prerequisites for Installing the vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-0AB6E692-AA47-4B6A-8CEA-38B754E16567.html).  
* **Plan Configuration:** The **Allow Privileged** setting must be enabled in the <%= vars.k8s_runtime_abbr %> tile for the plans you use with the vSphere CSI Driver. 
    To enable this setting, see [Installing <%= vars.k8s_runtime_abbr %> on vSphere](installing-vsphere.html#plans).<%#<br>   
    With this configuration, your containers run in privileged mode and 
    <%= vars.k8s_runtime_abbr % > automatically adds the kube-apiserver `--allow-privileged=true` parameter. 
For more information, see [vSphere CSI Driver - v2.3.0 release](https://vsphere-csi-driver.sigs.k8s.io/releases/v2.3.0.html).  #%>
* **The following must have access to your vCenter:**
    * Cluster control plane nodes.
    * Cluster worker nodes. You must enable this access in order for vSphere CSI Driver components on worker nodes to provision disks.
    * All Pods that are running vSphere CSI Driver components.  
* **vSphere v7.0 or vSphere v6.7U3:** vSphere must be vSphere v7.0 or later or vSphere v6.7U3 or later.  
 
## <a id='manual'></a>Install the vSphere CSI Driver on a <%= vars.k8s_runtime_abbr %> Cluster

This section provides procedures for manually installing CSI on a TKGI cluster.
Installing CSI on a TKGI cluster requires a number of steps:

* [Create a <%= vars.k8s_runtime_abbr %> Cluster](#create-cluster)
* [Customize Your Configuration](#customize-configuration)
* [Install the vSphere CSI Driver](#install-driver)

### <a id='create-cluster'></a>Create a <%= vars.k8s_runtime_abbr %> Cluster

To create a <%= vars.k8s_runtime_abbr %>-provisioned Kubernetes cluster:  

1. Create a cluster using [<%= vars.k8s_runtime_abbr %> create-cluster](cli/index.html#create-cluster):

    ```bash
    tkgi create-cluster CLUSTER-NAME --external-hostname EXTERNAL-HOSTNAME  \
    --plan PLAN-NAME --num-nodes 3 --network-profile single-tier-profile
    ```
    Where:
    * `CLUSTER-NAME` is the name you want to apply to your new cluster.  
        <p class="note"><strong>Note:</strong> Use only lowercacse characters when naming your cluster 
        if you manage your clusters with Tanzu Mission Control (TMC). Clusters with names that include an uppercase character cannot be attached to TMC.
        </p>
    * `EXTERNAL-HOSTNAME` is the address from which to access Kubernetes API.
    * `PLAN-NAME` is the name of the plan to base the new cluster on.
    To provide the ability to resize the cluster's PersistentVolume chose a plan
    where **Allow Privileged** is selected. For more information, 
    see [Plans](installing-nsx-t.html#plans) 
    in _Installing Tanzu Kubernetes Grid Integrated Edition on vSphere with NSX-T_.

    <pre class="terminal">
    &gt; tkgi create-cluster tkgi-cluster-5-shared-t1 --external-hostname tkgi-cluster-5-shared-t1 --plan large --num-nodes 3 --network-profile single-tier-profile
    </pre>

1. Confirm that all of the VMs in the Kubernetes cluster have hardware compatible with VMware version 15.

    ![VM Instance Summary pane in vCenter](images/vsphere/vm-cns.png)

### <a id='customize-configuration'></a>Customize Your CSI Driver Configuration

You must customize your vSphere CSI Driver configuration files before manually deploying the vSphere CSI Driver.

<p class="note"><strong>Note:</strong> For vSphere CSI Driver v2.3.0 and later
a single <code>vsphere-csi-driver.yaml</code> manifest file is used instead of the separate 
<code>vsphere-csi-controller-deployment.yaml</code> and <code>vsphere-csi-node-ds.yaml</code> 
manifest files used in prior versions.  
</p>

To download and customize the vSphere CSI Driver configuration files:  

1. Download the compatible vSphere CSI Driver manifest files from the [kubernetes-sigs/vsphere-csi-driver](https://github.com/kubernetes-sigs/vsphere-csi-driver) GitHub repository. 
For example, download the v2.4 drivers from [https://github.com/kubernetes-sigs/vsphere-csi-driver/tree/v2.4.0/manifests/vanilla](https://github.com/kubernetes-sigs/vsphere-csi-driver/tree/v2.4.0/manifests/vanilla).  

1. Modify the vSphere CSI Driver `vsphere-csi-driver.yaml` configuration file:  
    1. Remove the following nodeselector from the `vsphere-csi-controller` Deployment section:  

        ```
          nodeSelector:
            node-role.kubernetes.io/master: ""
        ``` 
    1. In the `vsphere-csi-node` DaemonSet section, replace all occurrences of `/var/lib/kubelet` with `/var/vcap/data/kubelet`.  



### <a id='install-driver'></a>Install the vSphere CSI Driver

To install the vSphere CSI Driver:

1. Complete the pre-installation configuration steps in 
[Deploy the vSphere Container Storage Plug-in on a Native Kubernetes Cluster](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-A1982536-F741-4614-A6F2-ADEE21AA4588.html):  
    1. [Create vmware-system-csi Namespace for vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-90966CC5-DF3E-426B-8AD1-95ADDC07C457.html)  
    1. [Taint Kubernetes Primary Node for the vSphere Container Storage Plug-in Installation](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-4E47B9F1-B250-4B36-8FEC-8F45E6529D23.html)  
    1. [Create a Kubernetes Secret for vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-BFF39F1D-F70A-4360-ABC9-85BDAFBE8864.html)  
1. Make copies of your customized `csi-vsphere.conf` configuration file 
        and customize a copy for each of your Kubernetes clusters:  
    * Configure the `cluster-id` value. If you deploy the vSphere CSI Driver to multiple Kubernetes clusters, 
    you must use a unique `cluster-id` value in each cluster. You can use the cluster's UUID as the `cluster-id` value. 
    The cluster's UUID is in the information returned by running `pks cluster CLUSTER-NAME`.  
1. Complete the installation and verification steps:  
    1. [Install vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-54BB79D2-B13F-4673-8CC2-63A772D17B3C.html)  


## <a id='create-storage'></a>Create a vSphere Storage Class

To create a vSphere Storage Class:

1. Open vCenter.
1. Open the vSAN Datastore Summary pane.

    ![vSAN Datastore Summary pane in vCenter](images/vsphere/datastore.png)

1. Determine the `datastoreurl` value for your Datastore.  
1. Create the following YAML:

    ```
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: demo-sts-storageclass
      annotations:
          storageclass.kubernetes.io/is-default-class: "true"
    provisioner: csi.vsphere.vmware.com
    allowVolumeExpansion: ALLOW-EXPANSION
    parameters:
      datastoreurl: "DATASTORE-URL"
    ```

    Where:
    * `ALLOW-EXPANSION` defines whether the cluster's PersistentVolume size is either resizable or static. 
    Set to `true` for resizable and `false` for static size.  
    * `DATASTORE-URL` is the URL to your Datastore. 
    For a non-vSAN datastore, the `datastoreurl` value looks like 
    `ds:///vmfs/volumes/5e66e525-8e46bd39-c184-005056ae28de/`.<br>  

    For example:

    ```
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: demo-sts-storageclass
      annotations:
          storageclass.kubernetes.io/is-default-class: "true"
    provisioner: csi.vsphere.vmware.com
    allowVolumeExpansion: true
    parameters:
      datastoreurl: "ds:///vmfs/volumes/vsan:52d8eb4842dbf493-41523be9cd4ff7b7/"
    ```

## <a id='resize-pv'></a>Resize a PersistentVolume

PersistentVolumes created using the CNS `StorageClass` procedures above can be resized. 
CNS supports PersistentVolume resizing of only off-line volumes.

To resize a PersistentVolume:

1. Stop all pods connected to the PersistentVolume.  
1. Wait until all pods have stopped. To determine if the pods have stopped running:

    ```bash
    kubectl  get statefulset -n NAMESPACE
    ```
    Where `NAMESPACE` is the namespace the PersistentVolume is in.  
<br>
    For example:
    <pre class="terminal">
    &gt; kubectl  get statefulset -n csi-namespace
    NAME          READY   AGE
    postgres-wl   0/0     15m  
    &gt; kubectl  get pods -n csi-namespace
    No resources found in csi-resize-test namespace.  
    &gt; kubectl  get pvc -n csi-namespace
    NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS             AGE
    postgredb-postgres-wl-0   Bound    pvc-c22811a5-0650-4492-a7f0-0d21a4971c5a   1Gi        RWO            postgres-sc-csi-resize   15m
    </pre>

1. Wait until all pods have stopped.  
1. Edit the PersistentVolume:
    
    ```bash
    kubectl edit pvc STATEFUL-SET-NAME -n NAMESPACE
    ```

    Where:
    * `STATEFUL-SET-NAME` is the name of the Pod with the PersistentVolume you are resizing.
    * `NAMESPACE` is the namespace the Pod is in.

    For example:
    
    <pre class="terminal">
    &gt; kubectl  edit pvc postgredb-postgres-wl-0 -n csi-namespace

    spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: postgres-sc-csi-resize
  volumeMode: Filesystem
  volumeName: pvc-c22811a5-0650-4492-a7f0-0d21a4971c5a
    </pre>

1. Modify the storage size.

    <p class="note"><strong>Note:</strong> Kubernetes does not support shrinking of PersistentVolumes.
    </p>

1. Restart the Pod using `kubectl  scale`:

    ```bash
    kubectl scale statefulset STATEFUL-SET-NAME  -n NAMESPACE --replicas=1
    ```
    Where:
    * `STATEFUL-SET-NAME` is the name of the Pod with the PersistentVolume you are resizing.
    * `NAMESPACE` is the namespace the Pod is in.

    For example:

    <pre class="terminal">
    &gt; kubectl scale statefulset postgres-wl  -n csi-namespace --replicas=1
    </pre>

1. Confirm the Pod is running:

    ```bash
    kubectl get statefulset -n NAMESPACE
    kubectl get pods -n NAMESPACE
    kubectl get pvc -n NAMESPACE
    kubectl get pv | grep STATEFUL-SET-NAME
    ```

    Where:
    * `STATEFUL-SET-NAME` is the name of the Pod with the PersistentVolume you are resizing.
    * `NAMESPACE` is the namespace the Pod is in.

    For example: 

    <pre class="terminal">
    &gt; kubectl  get statefulset -n csi-namespace
    NAME          READY   AGE
    postgres-wl   1/1     24m  

    &gt; kubectl get pods -n csi-namespace
    NAME            READY   STATUS    RESTARTS   AGE
    postgres-wl-0   2/2     Running   0          49s  

    &gt; kubectl  get pvc -n csi-namespace
    NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS             AGE
    postgredb-postgres-wl-0   Bound    pvc-c22811a5-0650-4492-a7f0-0d21a4971c5a   5Gi        RWO            postgres-sc-csi-resize   24m  

    &gt; kubectl  get pv | grep test
    pvc-c22811a5-0650-4492-a7f0-0d21a4971c5a   5Gi        RWO            Delete           Bound    csi-namespace/postgredb-postgres-wl-0   postgres-sc-csi-resize            23m
    </pre>

1. Confirm the Pod's PersistentVolume has been resized:

    ```bash
    kubectl  exec -it STATEFUL-SET-NAME -n NAMESPACE -- sh
    ```

    Where:
    * `STATEFUL-SET-NAME` is the name of the Pod with the PersistentVolume you are resizing.
    * `NAMESPACE` is the namespace the Pod is in.

    For example:

    <pre class="terminal">
    &gt; kubectl  exec -it postgres-wl-0 -n csi-namespace -- sh
    # df -h
    Filesystem      Size  Used Avail Use% Mounted on
    overlay          30G  1.8G   27G   7% /
    tmpfs            64M     0   64M   0% /dev
    tmpfs           7.9G     0  7.9G   0% /sys/fs/cgroup
    /dev/sdb2        48G  3.1G   42G   7% /etc/hosts
    /dev/sdc1        30G  1.8G   27G   7% /etc/hostname
    shm              64M  8.0K   64M   1% /dev/shm
    /dev/sdd        4.9G  847M  3.9G  18% /var/lib/postgresql/data
    tmpfs           7.9G   12K  7.9G   1% /run/secrets/kubernetes.io/serviceaccount

    </pre>



For more information about resizing PersistentVolumes, 
see [Resizing Persistent Volumes using Kubernetes]
(https://kubernetes.io/blog/2018/07/12/resizing-persistent-volumes-using-kubernetes/) 
in the Kubernetes documentation.  


## <a id='manual-upgrade'></a>Upgrade the vSphere CSI Driver on a <%= vars.k8s_runtime_abbr %> Cluster

If your <%= vars.k8s_runtime_abbr %> cluster is using a vSphere CSI Driver earlier than the currently supported versions, 
you must upgrade the CSI driver on the cluster.  

To upgrade the vSphere CSI Driver installed on your clusters:

1. Review the prerequisites for the vSphere CSI Driver version you are installing. For more information, see [Prerequisites for using the vSphere CSI Driver with <%= vars.k8s_runtime_abbr %>](#prereq) above.  
1. Review the configuration requirements for the vSphere CSI Driver version you are installing. 
For more information, see [Install the vSphere CSI Driver](#install-driver) above.  
1. Follow the steps in [Upgrade vSphere Container Storage Plug-in](https://docs.vmware.com/en/VMware-vSphere-Container-Storage-Plug-in/2.0/vmware-vsphere-csp-getting-started/GUID-3F277B52-68CC-4125-AD0F-E7293940B4B4.html).  
