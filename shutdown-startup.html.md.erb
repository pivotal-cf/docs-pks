---
title: Shutting Down and Restarting Tanzu Kubernetes Grid Integrated Edition 
owner: TKGI
iaas: vsphere-nsxt
---

This topic lists and describes the shutdown and startup sequence for <%= vars.product_full %>
including <%= vars.product_short %>-provisioned Kubernetes cluster nodes, <%= vars.k8s_runtime_abbr %> components, and (vSphere only) vSphere hosts.

Many of these operations use your IaaS dashboard, such as vSphere Client, Azure Portal, AWS Management Console, or GCP Console.

##<a id="shutdown"></a> Shutdown Sequence and Tasks

To perform a graceful shutdown of all Kubernetes, <%= vars.product_short %>, and infrastructure components, complete the following tasks in sequence.

###<a id="stop-resurrector"></a>Step 1: Disable BOSH Resurrection

If you have the **Enable VM Resurrector Plugin** checkbox selected in the BOSH Director tile > **Director Config** pane,
you must turn BOSH resurrection off before restarting <%= vars.k8s_runtime_abbr %>, to prevent BOSH from recreating VMs. 

To do this, run the command `bosh update-resurrection off`.

###<a id="delete-pdbs"></a>Step 2: Delete All PodDisruptionBudgets

To ensure that all workloads are drained as the worker nodes shutdown, remove all PodDisruptionBudgets 
before deleting your apps.

1. To confirm the names of your existing PodDisruptionBudgets:

    ```
    kubectl get poddisruptionbudgets -A
    ```

2. Back up all PodDisruptionBudgets.  
<br>
    To back up a single PodDisruptionBudget:   

    ```
    kubectl get poddisruptionbudget PDB-NAME -o yaml > PDB-NAME.yaml
    ```

    Where `PDB-NAME` is the name of one of your PodDisruptionBudgets.

3. Delete each PodDisruptionBudget until you have removed all PodDisruptionBudgets.  
<br>
    To delete a single PodDisruptionBudget:   

    ```
    kubectl edit poddisruptionbudget PDB-NAME
    ```

    Where `PDB-NAME` is the name of one of your PodDisruptionBudgets.

###<a id="shutdown-apps"></a>Step 3: Shut Down Customer Apps

Shut down all customer apps running on <%= vars.product_short %>-provisioned Kubernetes clusters.

<p class="note"><strong>Note:</strong> This task is optional. Perform it after considering the types of apps you have deployed. For example, stateful, stateless, or legacy apps.</p>

###<a id="shutdown-k8s"></a>Step 4: Shut Down Kubernetes Clusters

Shut down all <%= vars.product_short %>-provisioned Kubernetes clusters following the procedure defined in the <a href="https://community.pivotal.io/s/article/how-to-shutdown-and-startup-a-multi-master-pks-cluster">How to shutdown and startup a Multi Control Plane Node <%= vars.k8s_runtime_abbr %> cluster</a> knowledge base article.

For each Kubernetes cluster that you intend to shut down, do the following:

1. Using the BOSH CLI, retrieve the BOSH deployment name of your <%= vars.product_short %> clusters by running the following command:
    
    ```
    bosh deployments
    ```
     
    Kubernetes cluster deployment names begin with `service-instance_` and include a unique BOSH-generated hash.

1. Using the BOSH CLI, stop the Kubernetes worker nodes:  
    * For a Linux worker:

        ```
        bosh -d service-instance_CLUSTER-UUID stop worker
        ```
    * For a Windows worker:

        ```
        bosh -d service-instance_CLUSTER-UUID stop windows-worker
        ```        

    Where `CLUSTER-UUID` is the BOSH deployment name of your <%= vars.product_short %> cluster.  
<br>
    For example:

    <pre class="terminal">
    $ bosh -d service-instance_aa1234567bc8de9f0a1c stop worker
    </pre>  

    <p class="note"><strong>Note:</strong> When you use the BOSH <code>stop</code> command, all
    processes on the Kubernetes node are stopped. BOSH marks them stopped so that when the VM is
    powered back on, the processes do not start automatically.</p>
        
1. Using the BOSH CLI, stop the Kubernetes control plane nodes by running the following command:

    ```
    bosh -d service-instance_CLUSTER-UUID stop master
    ```

    Where `CLUSTER-UUID` is the BOSH deployment name of your <%= vars.product_short %> cluster.
    For example:

    <pre class="terminal">
    $ bosh -d service-instance_aa1234567bc8de9f0a1c stop master</pre>

1. Using your IaaS dashboard, shut down all Kubernetes node VMs. To do this, perform the following steps:
  1. Verify the node type by checking the "job" name in the **Custom Attributes** pane.
  1. Perform a graceful shutdown by right-clicking the target VM and selecting **Power** > **Shut Down Guest OS**.

        <img src="images/nsxt/shutdown/shutdown-k8s-nodes.png" alt="Shut Down Kubernetes Nodes">

        [View a larger version of this image.](images/nsxt/shutdown/shutdown-k8s-nodes.png)

###<a id="shutdown-tkgi-control"></a>Step 5: Stop the <%= vars.k8s_runtime_abbr %> Control Plane

To shut down the <%= vars.k8s_runtime_abbr %> control plane, stop and shut down the <%= vars.control_plane %> and <%= vars.control_plane_db %> VMs as follows:

1. [Stop <%= vars.k8s_runtime_abbr %> Control Plane Processes](#stop-tkgi-control)  
1. [Shut Down the <%= vars.k8s_runtime_abbr %> API and Database VMs](#shutdown-tkgi-vms)  

####<a id="stop-tkgi-control"></a>Stop <%= vars.k8s_runtime_abbr %> Control Plane Processes

To stop <%= vars.product_short %> control plane processes and services, do the following:

1. Using the BOSH CLI, retrieve the BOSH deployment ID of your <%= vars.product_short %> deployment by running the following command:

    ```
    bosh deployments
    ```
    The <%= vars.product_short %> deployment ID is `pivotal-container-service-` followed by a unique BOSH-generated hash.

1. Stop the TKGI control plane VM by running the following command:

    ```
    bosh -d pivotal-container-service-DEPLOYMENT-ID stop
    ```

    Where `DEPLOYMENT-ID` is the BOSH-generated ID of your Tanzu Kubernetes Grid Integrated Edition deployment.  
<br>
    For example:

    <pre class="terminal">
    $ bosh -d pivotal-container-service-1bf7b02738056cdc37e6 stop
    </pre>

####<a id="shutdown-tkgi-vms"></a>Shut Down the <%= vars.k8s_runtime_abbr %> API and Database VMs

To shut down the <%= vars.control_plane %> and <%= vars.control_plane_db %> VMs, do the following:

1. Run the `bosh vms` command to list your <%= vars.product_short %> control plane VMs.

    ```
    bosh -d pivotal-container-service-DEPLOYMENT-ID vms
    ```
    Where `DEPLOYMENT-ID` is the BOSH-generated ID of your <%= vars.product_short %> deployment.  
    <br>
    For example:

    <pre class="terminal">
    $ bosh -d pivotal-container-service-1bf7b02738056cdc37e6 vms</pre>

1. From the `bosh vms` output, record: 
    * The <%= vars.control_plane %> VM name, 
listed under **Instances** as `pivotal-container-service/` followed by a unique BOSH-generated hash.  
    * The <%= vars.control_plane_db %> VM name, 
listed under **Instances** as `pks-db/` followed by a unique BOSH-generated hash.

1. For each <%= vars.control_plane_db %> VM listed, run `bosh stop` to shut it down:

    ```
    bosh -d TKGI-DATABASE-VM-ID stop
    ```

    Where `TKGI-DATABASE-VM-ID` is the name of the <%= vars.control_plane_db %> VM.

1. Using your IaaS dashboard, locate and gracefully shut down the <%= vars.control_plane %> VMs:
    * The <%= vars.control_plane %> VMs
    * The <%= vars.control_plane_db %> VMs

    <img src="images/nsxt/shutdown/shutdown-pks.png" alt="Shut Down <%= vars.control_plane %> VM">

    [View a larger version of this image.](images/nsxt/shutdown/shutdown-pks.png)

###<a id="shutdown-harbor"></a>Step 6: Shut Down VMware Harbor Registry (vSphere Only)

To shut down the Harbor Registry VM, do the following:

1. Using the BOSH CLI, retrieve the BOSH deployment ID of your Harbor Registry
deployment by running the following command:

    ```
    bosh deployments
    ```
    Harbor Registry deployment names begin with `harbor-container-registry` and include a unique BOSH-generated hash.

1. Using the BOSH CLI, stop the Harbor Registry VM by running the following command:

    ```
    bosh -d harbor-container-registry-DEPLOYMENT-ID stop
    ```

    Where `DEPLOYMENT-ID` is the BOSH-generated ID of your Harbor Registry deployment. For example:

    <pre class="terminal">
    $ bosh -d harbor-container-registry-b4023f6857207b237399 stop</pre>

1. Using vCenter, locate and gracefully shut down the Harbor Registry VM.

    <img src="images/nsxt/shutdown/shutdown-harbor.png" alt="Shut Down Harbor Registry VM">

    [View a larger version of this image.](images/nsxt/shutdown/shutdown-harbor.png)

###<a id="shutdown-bosh"></a>Step 7: Shut Down BOSH Director

Using your IaaS dashboard, locate and gracefully shut down the BOSH Director VM.

<img src="images/nsxt/shutdown/shutdown-bosh.png" alt="Shut Down BOSH VM">

[View a larger version of this image.](images/nsxt/shutdown/shutdown-bosh.png)

###<a id="shutdown-om"></a>Step 8: Shut Down Ops Manager

Using your IaaS dashboard, locate and gracefully shut down the Ops Manager VM.

<img src="images/nsxt/shutdown/shutdown-om.png" alt="Shut Down Ops Manager VM">

[View a larger version of this image.](images/nsxt/shutdown/shutdown-om.png)

###<a id="shutdown-nsxt"></a>Step 9: Shut Down NSX-T Components (vSphere NSX-T Only)

Using vCenter, gracefully shut down all NSX-T VMs in the following order:

1. NSX-T Manager
1. NSX-T Controllers
1. NSX-T Edge Nodes

<img src="images/nsxt/shutdown/shutdown-nsxt.png" alt="Shut Down NSX-T VMs">

[View a larger version of this image.](images/nsxt/shutdown/shutdown-nsxt.png)

###<a id="shutdown-vc"></a>Step 10: Shut Down vCenter Server (vSphere Only)

To shut down the vCenter Server VM, do the following:

1. Navigate to the vCenter Appliance Management Interface at `https://YOUR-VCENTER-HOSTNAME-OR-IP-ADDRESS>:5480`, where
`YOUR-VCENTER-HOSTNAME-OR-IP-ADDRESS` is the hostname or IP address that you use to connect to vCenter through the vSphere Web Client.
1. Log in as root.
1. Select **Actions** > **Shutdown** from the menu and confirm the operation.

For more information about how to shut down the vCenter Server VM, see [Reboot or Shut Down the vCenter Server Appliance](https://docs.vmware.com/en/VMware-vSphere/6.7/com.vmware.vsphere.vcsa.doc/GUID-A0BB46B0-DE71-4C62-A5BF-22B17ED8AA98.html) in the vSphere documentation
and the [How to stop, start, or restart vCenter Server 6.x services](https://kb.vmware.com/s/article/2109881) KB article.

<p class="note"><strong>Note:</strong> After you shut down this vCenter VM, the vSphere Web Client will not be available.</p>

<img src="images/nsxt/shutdown/shutdown-vc-2.png" alt="Shut Down vCenter Server VM">

[View a larger version of this image](images/nsxt/shutdown/shutdown-vc.png)

###<a id="shutdown-esxi"></a>Step 11: Shut Down ESXi Hosts (vSphere NSX-T Only)

To shut down each ESXi host in the vSphere cluster, do the following:

1. Put the ESXi host into maintenance mode by doing the following:
    1. Using a browser, navigate to the HTTPS IP address of the ESXi host, for example: https://10.196.146.20/.
    1. Log in using vSphere administrative credentials.
    1. Put the ESXi host in maintenance mode by selecting **Actions** > **Enter maintenance mode**.
     <img src="images/nsxt/shutdown/maint-mode.png" alt="Put ESXi Host into Maintenance Mode">
     [View a larger version of this image.](images/nsxt/shutdown/maint-mode.png)

2. Power off the ESXi host. To do this, you have two options:
    - Use the EXSi web interface and select **Actions** > **Shut down**.
    - Use the remote management console for the host, such as Dell IDRAC or HP iLO.
      <img src="images/nsxt/shutdown/shutdown-idrac.png" alt="Shut Down ESXi Host">
     [View a larger version of this image.](images/nsxt/shutdown/shutdown-idrac.png)

##<a id="startup"></a> Startup Sequence and Tasks

To restart all Kubernetes, <%= vars.product_short %>, and infrastructure components, complete the following tasks in the sequence presented.

###<a id="start-esxi"></a> Step 1: Start ESXi Hosts (vSphere NSX-T Only)

To start the ESXi hosts, do the following:

1. Using the remote management console, such as Dell IDRAC or HP iLO, power on each ESXi host.
1. Connect to the web interface of each ESXi host and exit maintenance mode.

###<a id="start-vc"></a> Step 2: Start vCenter (vSphere Only)

Connect to the web interface of the ESXi server that hosts the vCenter VM. Select the vCenter VM,
and click **Power On**.

###<a id="start-nsxt"></a> Step 3: Start NSX-T Components (vSphere NSX-T Only)

To start the NSX-T components, perform the following steps:

1. Log into vCenter using the vSphere Client.
1. Power on the following VMs in the following order:
   1. NSX-T Manager
   1. NSX-T Controllers
   1. NSX-T Edge Nodes

###<a id="start-om"></a> Step 4: Start Ops Manager

1. Using your IaaS dashboard, power on the Ops Manager VM.
1. Using a browser, go to the Ops Manager URL.
1. Enter the Ops Manager passphrase.
1. Log in to the Ops Manager UI.

###<a id="start-bosh"></a> Step 5: Start the BOSH Director

Using your IaaS dashboard, power on the BOSH Director VM.

<p class="note"><strong>Note:</strong> BOSH is aware that all the VMs under its control were stopped. BOSH does not attempt to resurrect any VMs, which is the desired behavior.</p>

It may take approximately 90 minutes for BOSH to start properly.

To speed up the BOSH startup process:

1. Obtain the BOSH Director VM Credentials from Ops Manager. For information about doing this, see
[Retrieving Credentials from Your Deployment](https://docs.pivotal.io/ops-manager/install/credentials.html) in the Ops Manager documentation.
1. SSH to the BOSH Director VM.
1. On the BOSH Director VM, run the following commands:

    ```
    sudo -i
    monit summary
    ```
1. If you see messages such as `Process uaa Connection failed` and `Process credhub not monitored`, then run the following command:

    ```
    monit restart uaa
    ```
1. After a few minutes, run the following command again:

    ```
    monit summary
    ```
    You should see that the `uaa` and `credhub` processes are now running. At this point, the BOSH Director should be fully up and running.

###<a id="start-tkgi-control"></a>Step 6: Start the <%= vars.k8s_runtime_abbr %> Control Plane

To start the <%= vars.k8s_runtime_abbr %> Control Plane, do the following:

1. Using your IaaS dashboard, power on the <%= vars.control_plane_db %> VMs.

1. Restart the <%= vars.control_plane_db %> VMs as follows, depending on whether they are scaled at `1` or `3` as determined in [Stop the <%= vars.k8s_runtime_abbr %> Control Plane](#shutdown-tkgi-control):
    * **<%= vars.control_plane_db %> Scaled at `1`**:
        1. To start the <%= vars.control_plane_db %> VM:

            ```
            bosh -d TKGI-DB-VM-ID start
            ```

            Where `TKGI-DB-VM-ID` is the name of the <%= vars.control_plane_db %> VM listed by the `bosh vms` command.
        1. To start the <%= vars.control_plane_db %> deployment:

            ```
            bosh -d DEPLOYMENT-ID start pks-db
            ```

            Where `DEPLOYMENT-ID` is the BOSH-generated ID of the <%= vars.product_short %> deployment.
  * **<%= vars.control_plane_db %> Scaled at `3`**:

        Run the `bootstrap` errand:

        ```
        bosh -d tkgi-db-DEPLOYMENT-ID run-errand bootstrap
        ```

        Where `DEPLOYMENT-ID` is the BOSH-generated ID of the <%= vars.product_short %> deployment.
        <p class="note"><strong>Note:</strong> For more information about the <code>bootstrap</code> errand, see <a href="https://docs.pivotal.io/p-mysql/bootstrapping.html#assisted-bootstrap">Run the Bootstrap Errand</a> in the VMware Tanzu SQL with MySQL for VMs documentation</em>.</p>

1. Using your IaaS dashboard, power on the <%= vars.control_plane %> VMs.

1. To start each <%= vars.control_plane %> VM listed by the `bosh vms` command:

    ```
    bosh -d TKGI-API-VM-ID start
    ```

    Where `TKGI-API-VM-ID` is the name of a <%= vars.control_plane %> VM.
    Your environment might have as many as three <%= vars.control_plane %> VMs.
1. To start the <%= vars.control_plane %> deployment:

    ```
    bosh -d DEPLOYMENT-ID start pivotal-container-service
    ```

    Where `DEPLOYMENT-ID` is the BOSH-generated ID of the <%= vars.product_short %> deployment.


###<a id="start-harbor"></a> Step 7: Start Harbor Registry (vSphere Only)

To start Harbor Registry, do the following:

1. Using vCenter, power on the Harbor VM.
1. Using the BOSH CLI, start the Harbor process on the VM by running the following command:

    ```
    bosh -d harbor-container-registry-DEPLOYMENT-ID start
    ```

    Where `DEPLOYMENT-ID` is the BOSH-generated ID of your Harbor Registry deployment. For example:

    <pre class="terminal">
    $ bosh -d harbor-container-registry-b4023f6857207b237399 start</pre>

###<a id="start-k8s"></a> Step 8: Start the Kubernetes Clusters

For each Kubernetes cluster that you intend to start, follow the steps in the section below that
corresponds to the number of control plane nodes in the cluster:

* [Start a Cluster with Three Control Plane Nodes](#three-node-start)
* [Start a Cluster with Five Control Plane Nodes](#five-node-start)

####<a id="three-node-start"></a> Start a Cluster with Three Control Plane Nodes

Use the BOSH CLI to run the commands below. For more information about the BOSH CLI, see the
[BOSH CLI Documentation](https://bosh.io/docs/cli-v2/).

1. Retrieve the BOSH deployment name of your <%= vars.product_short %> cluster:

    ```
    bosh deployments
    ```
    <%= vars.product_short %> cluster deployment names begin with `service-instance_` followed by
    the BOSH deployment name.

1. Start etcd on the `master/0` node. A cluster with three members must have at least two members
running to satisfy quorum, so you must first start one etcd instance.

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit start etcd"
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step.

1. View the status of etcd on the `master/0` node:

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit summary"
    ```

    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step. Wait until
    etcd on `master/0` is running before executing the next step.

1. Start the `master/1` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/1
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step. Wait until
    `master/1` has status **Ready** before executing the next step.

1. Start the `master/2` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/2
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step. Wait until
    `master/2` has status **Ready** before executing the next step.

1. Stop etcd on the `master/0` node:

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit stop etcd"
    ```
    Wait until etcd on `master/0` has stopped and has status **not monitored** before executing the
    next step.

1. Start the `master/0` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/0
    ```
    Wait until `master/0` has status **Ready** before executing the next step.

1. Start the Kubernetes worker nodes:

    ```
    bosh -d DEPLOYMENT-NAME start worker
    ```

####<a id="five-node-start"></a> Start a Cluster with Five Control Plane Nodes

Use the BOSH CLI to run the commands below. For more information about the BOSH CLI, see the
[BOSH CLI Documentation](https://bosh.io/docs/cli-v2/).

1. Retrieve the BOSH deployment name of your <%= vars.product_short %> cluster:

    ```
    bosh deployments
    ```
    <%= vars.product_short %> cluster deployment names begin with `service-instance_` followed by
    the BOSH deployment name.

1. Start etcd on the `master/0` and `master/1` nodes. A cluster with five members must have at
least three members running to satisfy quorum, so you must first start two etcd instance.

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit start etcd"
    bosh -d DEPLOYMENT-NAME ssh master/1 "sudo monit start etcd"
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step.

1. View the status of etcd on the `master/0` and `master/1` nodes:

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit summary"
    bosh -d DEPLOYMENT-NAME ssh master/1 "sudo monit summary"
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step. Wait until
    etcd on `master/0` and `master/1` is running before executing the next step.

1. Start the `master/2` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/2
    ```
    Where `DEPLOYMENT-NAME` is the BOSH deployment name retrieved in the previous step. Wait until
    `master/2` has status **Ready** before executing the next step.

1. Start the `master/3` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/3
    ```
    Wait until `master/3` has status **Ready** before executing the next step.

1. Start the `master/4` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/4
    ```
    Wait until `master/4` has status **Ready** before executing the next step.

1. Stop etcd on the `master/1` node:

    ```
    bosh -d DEPLOYMENT-NAME ssh master/1 "sudo monit stop etcd"
    ```
    Wait until etcd on `master/1` has stopped and has status **not monitored** before executing the
    next step.

1. Start the `master/1` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/1
    ```
    Wait until `master/1` has status **Ready** before executing the next step.

1. Stop etcd on the `master/0` node:

    ```
    bosh -d DEPLOYMENT-NAME ssh master/0 "sudo monit stop etcd"
    ```
    Wait until etcd on `master/0` has stopped and has status **not monitored** before executing the
    next step.

1. Start the `master/0` node:

    ```
    bosh -d DEPLOYMENT-NAME start master/0
    ```
    Wait until `master/0` has status **Ready** before executing the next step.

1. Start the Kubernetes worker nodes:

    ```
    bosh -d DEPLOYMENT-NAME start worker
    ```

###<a id="start-apps"></a> Step 9: Start Customer Apps

Start all apps running on the <%= vars.product_short %>-provisioned Kubernetes clusters.

###<a id="restore-pdbs"></a> Step 10:  Restore All PodDisruptionBudgets

After you have restarted your apps, restore your PodDisruptionBudgets.

1. To restore your PodDisruptionBudgets,
re-create each of the PodDisruptionBudgets you backed up before stopping your apps.
<br>
    To re-create a single PodDisruptionBudget:

    ```
    kubectl apply -f PDB-CONFIG-NAME
    ```
    Where `PDB-CONFIG-NAME` is the name of one of the backup PodDisruptionBudget YAML configuration
    files that you created before stopping your apps.

###<a id="start-resurrector"></a>Step 11: Re-enable BOSH Resurrection

Turn BOSH resurrection back on by running the command `bosh update-resurrection on`.
